2023-12-05 15:22:11,806 [INFO] feedbax,28: Logger configured.
2023-12-05 15:22:23,602 [DEBUG] feedbax.trainer,218: JIT globally disabled, skipping pre-run compilation
2023-12-05 15:22:28,572 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:28,573 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:28,573 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:28,573 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:28,573 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
    ),
  )
)
2023-12-05 15:22:28,576 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:28,576 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:28,576 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ShapedArray(float32[150,12])>with<DynamicJaxprTrace(level=4/0)>,
    weight_hh=Traced<ShapedArray(float32[150,50])>with<DynamicJaxprTrace(level=4/0)>,
    bias=Traced<ShapedArray(float32[150])>with<DynamicJaxprTrace(level=4/0)>,
    bias_n=Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>,
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Traced<ShapedArray(float32[6,50])>with<DynamicJaxprTrace(level=4/0)>,
    bias=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:28,576 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    vel=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  )
)
2023-12-05 15:22:28,576 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>,
  output=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  encoding=None
)
2023-12-05 15:22:28,578 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:28,578 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:28,578 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ShapedArray(float32[150,12])>with<DynamicJaxprTrace(level=4/0)>,
  weight_hh=Traced<ShapedArray(float32[150,50])>with<DynamicJaxprTrace(level=4/0)>,
  bias=Traced<ShapedArray(float32[150])>with<DynamicJaxprTrace(level=4/0)>,
  bias_n=Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>,
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:28,578 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,578 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,585 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:28,586 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:28,586 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ShapedArray(float32[150,12])>with<DynamicJaxprTrace(level=4/0)>,
      weight_hh=Traced<ShapedArray(float32[150,50])>with<DynamicJaxprTrace(level=4/0)>,
      bias=Traced<ShapedArray(float32[150])>with<DynamicJaxprTrace(level=4/0)>,
      bias_n=Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>,
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Traced<ShapedArray(float32[6,50])>with<DynamicJaxprTrace(level=4/0)>,
      bias=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:28,586 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,586 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,588 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:28,588 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:28,588 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ShapedArray(float32[150,12])>with<DynamicJaxprTrace(level=4/0)>,
      weight_hh=Traced<ShapedArray(float32[150,50])>with<DynamicJaxprTrace(level=4/0)>,
      bias=Traced<ShapedArray(float32[150])>with<DynamicJaxprTrace(level=4/0)>,
      bias_n=Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>,
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Traced<ShapedArray(float32[6,50])>with<DynamicJaxprTrace(level=4/0)>,
      bias=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:28,588 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,588 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,594 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:28,594 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:28,594 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:28,594 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,594 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
    ),
    muscles=VirtualMuscleState(
      activation=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      length=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      velocity=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      tension=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    vel=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    force=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  ),
  solver=None
)
2023-12-05 15:22:28,597 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:28,597 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:28,597 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
    inertia_gain=1.0
  )
)
2023-12-05 15:22:28,597 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,597 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:28,612 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:28,612 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:28,612 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
  theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
  l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:28,612 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,612 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  ),
  muscles=VirtualMuscleState(
    activation=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    length=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    velocity=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    tension=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
  )
)
2023-12-05 15:22:28,617 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:28,617 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:28,617 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:28,617 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  )
)
2023-12-05 15:22:28,617 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:28,641 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:28,641 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:28,641 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
    l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:28,641 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  length=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  velocity=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
  tension=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:28,641 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,646 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:28,646 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:28,646 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
      theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
      l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:28,646 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
2023-12-05 15:22:28,646 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
      torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
    ),
    muscles=VirtualMuscleState(
      activation=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      length=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      velocity=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      tension=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
    )
  ),
  None
)
2023-12-05 15:22:28,690 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:28,690 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:28,690 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        m=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        I=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        s=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
        B=Traced<ShapedArray(float32[2,2])>with<DynamicJaxprTrace(level=4/0)>,
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
      theta0=Traced<ShapedArray(float32[2,6])>with<DynamicJaxprTrace(level=4/0)>,
      l0=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:28,690 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:28,690 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
    torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
  ),
  muscles=VirtualMuscleState(
    activation=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    length=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    velocity=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>,
    tension=Traced<ShapedArray(float32[6])>with<DynamicJaxprTrace(level=4/0)>
  )
)
2023-12-05 15:22:28,692 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:28,692 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:28,692 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:28,692 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  d_theta=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  torque=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:28,692 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  vel=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>,
  force=Traced<ShapedArray(float32[2])>with<DynamicJaxprTrace(level=4/0)>
)
2023-12-05 15:22:29,624 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:29,624 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:29,624 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:29,624 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
)
2023-12-05 15:22:29,624 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Array([0., 0.], dtype=float32),
    Array([0., 0.], dtype=float32),
    Array([0., 0.], dtype=float32),
    Array([0., 0.], dtype=float32)
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:29,642 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:29,643 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:29,643 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:29,643 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  )
)
2023-12-05 15:22:29,643 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],      dtype=float32),
  output=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  encoding=None
)
2023-12-05 15:22:29,736 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:29,737 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:29,737 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:29,737 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.98262835,
         1.4720888 ,  0.        ,  0.        , -0.08871493,  0.45884863,
         0.        ,  0.        ]], dtype=float32)
  batch_dim = 0
2023-12-05 15:22:29,737 [DEBUG] feedbax.model,117: Substate:
Array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],      dtype=float32)
2023-12-05 15:22:30,695 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:30,695 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:30,695 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:30,695 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.06598201  0.00378295 -0.00741061 -0.02380756 -0.06791491 -0.10675435
   0.1209611  -0.14318301  0.10726806 -0.12795988 -0.11745059 -0.19797878
  -0.08091407 -0.02797558  0.0711264   0.03313591 -0.07499471 -0.06607192
   0.08319082  0.00192161  0.05128886  0.08408138 -0.04471491  0.2396603
  -0.15533268 -0.02572415 -0.00299303 -0.07380454  0.14948215  0.00544022
   0.06741923  0.12836555 -0.08036761  0.1368632  -0.1396497  -0.02325487
   0.02460769 -0.12100208 -0.04843872 -0.02713818  0.01505624  0.01158307
   0.12044135  0.00936022  0.09199212 -0.0533824   0.03874956 -0.0169859
   0.08315156  0.01796099]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.06598201,  0.00378295, -0.00741061, -0.02380756, -0.06791491,
        -0.10675435,  0.1209611 , -0.14318301,  0.10726806, -0.12795988,
        -0.11745059, -0.19797878, -0.08091407, -0.02797558,  0.0711264 ,
         0.03313591, -0.07499471, -0.06607192,  0.08319082,  0.00192161,
         0.05128886,  0.08408138, -0.04471491,  0.2396603 , -0.15533268,
        -0.02572415, -0.00299303, -0.07380454,  0.14948215,  0.00544022,
         0.06741923,  0.12836555, -0.08036761,  0.1368632 , -0.1396497 ,
        -0.02325487,  0.02460769, -0.12100208, -0.04843872, -0.02713818,
         0.01505624,  0.01158307,  0.12044135,  0.00936022,  0.09199212,
        -0.0533824 ,  0.03874956, -0.0169859 ,  0.08315156,  0.01796099]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bd500>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc232de0; to 'JaxprTracer' at 0x7f74dc231bc0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc220c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:30,695 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.06598201  0.00378295 -0.00741061 -0.02380756 -0.06791491 -0.10675435
   0.1209611  -0.14318301  0.10726806 -0.12795988 -0.11745059 -0.19797878
  -0.08091407 -0.02797558  0.0711264   0.03313591 -0.07499471 -0.06607192
   0.08319082  0.00192161  0.05128886  0.08408138 -0.04471491  0.2396603
  -0.15533268 -0.02572415 -0.00299303 -0.07380454  0.14948215  0.00544022
   0.06741923  0.12836555 -0.08036761  0.1368632  -0.1396497  -0.02325487
   0.02460769 -0.12100208 -0.04843872 -0.02713818  0.01505624  0.01158307
   0.12044135  0.00936022  0.09199212 -0.0533824   0.03874956 -0.0169859
   0.08315156  0.01796099]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.06598201,  0.00378295, -0.00741061, -0.02380756, -0.06791491,
        -0.10675435,  0.1209611 , -0.14318301,  0.10726806, -0.12795988,
        -0.11745059, -0.19797878, -0.08091407, -0.02797558,  0.0711264 ,
         0.03313591, -0.07499471, -0.06607192,  0.08319082,  0.00192161,
         0.05128886,  0.08408138, -0.04471491,  0.2396603 , -0.15533268,
        -0.02572415, -0.00299303, -0.07380454,  0.14948215,  0.00544022,
         0.06741923,  0.12836555, -0.08036761,  0.1368632 , -0.1396497 ,
        -0.02325487,  0.02460769, -0.12100208, -0.04843872, -0.02713818,
         0.01505624,  0.01158307,  0.12044135,  0.00936022,  0.09199212,
        -0.0533824 ,  0.03874956, -0.0169859 ,  0.08315156,  0.01796099]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bd500>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc232de0; to 'JaxprTracer' at 0x7f74dc231bc0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc220c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:30,712 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:30,713 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:30,713 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:30,713 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.06598201  0.00378295 -0.00741061 -0.02380756 -0.06791491 -0.10675435
   0.1209611  -0.14318301  0.10726806 -0.12795988 -0.11745059 -0.19797878
  -0.08091407 -0.02797558  0.0711264   0.03313591 -0.07499471 -0.06607192
   0.08319082  0.00192161  0.05128886  0.08408138 -0.04471491  0.2396603
  -0.15533268 -0.02572415 -0.00299303 -0.07380454  0.14948215  0.00544022
   0.06741923  0.12836555 -0.08036761  0.1368632  -0.1396497  -0.02325487
   0.02460769 -0.12100208 -0.04843872 -0.02713818  0.01505624  0.01158307
   0.12044135  0.00936022  0.09199212 -0.0533824   0.03874956 -0.0169859
   0.08315156  0.01796099]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.06598201,  0.00378295, -0.00741061, -0.02380756, -0.06791491,
        -0.10675435,  0.1209611 , -0.14318301,  0.10726806, -0.12795988,
        -0.11745059, -0.19797878, -0.08091407, -0.02797558,  0.0711264 ,
         0.03313591, -0.07499471, -0.06607192,  0.08319082,  0.00192161,
         0.05128886,  0.08408138, -0.04471491,  0.2396603 , -0.15533268,
        -0.02572415, -0.00299303, -0.07380454,  0.14948215,  0.00544022,
         0.06741923,  0.12836555, -0.08036761,  0.1368632 , -0.1396497 ,
        -0.02325487,  0.02460769, -0.12100208, -0.04843872, -0.02713818,
         0.01505624,  0.01158307,  0.12044135,  0.00936022,  0.09199212,
        -0.0533824 ,  0.03874956, -0.0169859 ,  0.08315156,  0.01796099]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bd500>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc232de0; to 'JaxprTracer' at 0x7f74dc231bc0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc220c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:30,713 [DEBUG] feedbax.model,117: Substate:
Array([0., 0., 0., 0., 0., 0.], dtype=float32)
2023-12-05 15:22:31,007 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:31,007 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:31,007 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:31,007 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bcbc0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24874659 0.24711516 0.24995905 0.24897066 0.2497127  0.24963214]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2bda80; to 'JaxprTracer' at 0x7f74dc2bc9f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2226b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:31,007 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Array([1., 1., 1., 1., 1., 1.], dtype=float32),
      velocity=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      tension=Array([0., 0., 0., 0., 0., 0.], dtype=float32)
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:31,401 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:31,402 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:31,402 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:31,402 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:31,402 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
)
2023-12-05 15:22:31,576 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:31,577 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:31,577 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:31,577 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bcbc0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24874659 0.24711516 0.24995905 0.24897066 0.2497127  0.24963214]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2bda80; to 'JaxprTracer' at 0x7f74dc2bc9f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2226b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:31,577 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Array([1., 1., 1., 1., 1., 1.], dtype=float32),
    velocity=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    tension=Array([0., 0., 0., 0., 0., 0.], dtype=float32)
  )
)
2023-12-05 15:22:31,598 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:31,598 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:31,598 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:31,598 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bcbc0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24874659 0.24711516 0.24995905 0.24897066 0.2497127  0.24963214]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2bda80; to 'JaxprTracer' at 0x7f74dc2bc9f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2226b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  )
)
2023-12-05 15:22:31,598 [DEBUG] feedbax.model,117: Substate:
(
  Array([1., 1., 1., 1., 1., 1.], dtype=float32),
  Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  Array([0., 0., 0., 0., 0., 0.], dtype=float32)
)
2023-12-05 15:22:32,380 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:32,380 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:32,380 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:32,380 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[ 0.,  0.,  0.,  0.,  0., -0.]], dtype=float32)
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdee0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.86293125 0.19858623 0.9975155  0.85298735 0.8863642  0.40776005]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2a4d60; to 'JaxprTracer' at 0x7f74dc2a4cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c04f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:32,380 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
2023-12-05 15:22:32,489 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:32,489 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:32,489 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:32,489 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bcbc0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24874659 0.24711516 0.24995905 0.24897066 0.2497127  0.24963214]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2bda80; to 'JaxprTracer' at 0x7f74dc2bc9f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2226b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:32,489 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457]
 [-0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457],
       [-0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bde80>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2a7ce0; to 'JaxprTracer' at 0x7f74dc2a7470>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc47f830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[ 0.,  0.,  0.,  0.,  0., -0.]], dtype=float32)
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdee0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.86293125 0.19858623 0.9975155  0.85298735 0.8863642  0.40776005]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2a4d60; to 'JaxprTracer' at 0x7f74dc2a4cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c04f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:33,395 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:33,395 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:33,395 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:33,395 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:33,395 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be000>, in_tracers=(Traced<ConcreteArray(0.05000000074505806, dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc269120; to 'JaxprTracer' at 0x7f74dc26bf10>], out_avals=[ShapedArray(float32[1,2])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4b5df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be7a0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc5f4810; to 'JaxprTracer' at 0x7f74dc5f71a0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc639ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0., 0., 0., 0., 0.]], dtype=float32)
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdee0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.86293125 0.19858623 0.9975155  0.85298735 0.8863642  0.40776005]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2a4d60; to 'JaxprTracer' at 0x7f74dc2a4cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c04f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:33,465 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:33,465 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:33,465 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:33,465 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be000>, in_tracers=(Traced<ConcreteArray(0.05000000074505806, dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc269120; to 'JaxprTracer' at 0x7f74dc26bf10>], out_avals=[ShapedArray(float32[1,2])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4b5df0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be7a0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc5f4810; to 'JaxprTracer' at 0x7f74dc5f71a0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc639ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:33,465 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:34,223 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:34,223 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:34,223 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:34,223 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8130; to 'JaxprTracer' at 0x7f74dc2f8770>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc497930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:34,223 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:34,241 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:34,241 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:34,241 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:34,242 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  )
)
2023-12-05 15:22:34,242 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.06598201  0.00378295 -0.00741061 -0.02380756 -0.06791491 -0.10675435
   0.1209611  -0.14318301  0.10726806 -0.12795988 -0.11745059 -0.19797878
  -0.08091407 -0.02797558  0.0711264   0.03313591 -0.07499471 -0.06607192
   0.08319082  0.00192161  0.05128886  0.08408138 -0.04471491  0.2396603
  -0.15533268 -0.02572415 -0.00299303 -0.07380454  0.14948215  0.00544022
   0.06741923  0.12836555 -0.08036761  0.1368632  -0.1396497  -0.02325487
   0.02460769 -0.12100208 -0.04843872 -0.02713818  0.01505624  0.01158307
   0.12044135  0.00936022  0.09199212 -0.0533824   0.03874956 -0.0169859
   0.08315156  0.01796099]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.06598201,  0.00378295, -0.00741061, -0.02380756, -0.06791491,
        -0.10675435,  0.1209611 , -0.14318301,  0.10726806, -0.12795988,
        -0.11745059, -0.19797878, -0.08091407, -0.02797558,  0.0711264 ,
         0.03313591, -0.07499471, -0.06607192,  0.08319082,  0.00192161,
         0.05128886,  0.08408138, -0.04471491,  0.2396603 , -0.15533268,
        -0.02572415, -0.00299303, -0.07380454,  0.14948215,  0.00544022,
         0.06741923,  0.12836555, -0.08036761,  0.1368632 , -0.1396497 ,
        -0.02325487,  0.02460769, -0.12100208, -0.04843872, -0.02713818,
         0.01505624,  0.01158307,  0.12044135,  0.00936022,  0.09199212,
        -0.0533824 ,  0.03874956, -0.0169859 ,  0.08315156,  0.01796099]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be6f0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8bd0; to 'JaxprTracer' at 0x7f74dc2f8f90>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc247870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be380>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f9210; to 'JaxprTracer' at 0x7f74dc2f9300>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc290bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:34,265 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:34,265 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:34,265 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:34,265 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.98262835,
         1.4720888 ,  0.        ,  0.        , -0.08871493,  0.45884863,
         0.        ,  0.        ]], dtype=float32)
  batch_dim = 0
2023-12-05 15:22:34,265 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.06598201  0.00378295 -0.00741061 -0.02380756 -0.06791491 -0.10675435
   0.1209611  -0.14318301  0.10726806 -0.12795988 -0.11745059 -0.19797878
  -0.08091407 -0.02797558  0.0711264   0.03313591 -0.07499471 -0.06607192
   0.08319082  0.00192161  0.05128886  0.08408138 -0.04471491  0.2396603
  -0.15533268 -0.02572415 -0.00299303 -0.07380454  0.14948215  0.00544022
   0.06741923  0.12836555 -0.08036761  0.1368632  -0.1396497  -0.02325487
   0.02460769 -0.12100208 -0.04843872 -0.02713818  0.01505624  0.01158307
   0.12044135  0.00936022  0.09199212 -0.0533824   0.03874956 -0.0169859
   0.08315156  0.01796099]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.06598201,  0.00378295, -0.00741061, -0.02380756, -0.06791491,
        -0.10675435,  0.1209611 , -0.14318301,  0.10726806, -0.12795988,
        -0.11745059, -0.19797878, -0.08091407, -0.02797558,  0.0711264 ,
         0.03313591, -0.07499471, -0.06607192,  0.08319082,  0.00192161,
         0.05128886,  0.08408138, -0.04471491,  0.2396603 , -0.15533268,
        -0.02572415, -0.00299303, -0.07380454,  0.14948215,  0.00544022,
         0.06741923,  0.12836555, -0.08036761,  0.1368632 , -0.1396497 ,
        -0.02325487,  0.02460769, -0.12100208, -0.04843872, -0.02713818,
         0.01505624,  0.01158307,  0.12044135,  0.00936022,  0.09199212,
        -0.0533824 ,  0.03874956, -0.0169859 ,  0.08315156,  0.01796099]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be6f0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8bd0; to 'JaxprTracer' at 0x7f74dc2f8f90>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc247870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:34,449 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:34,449 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:34,449 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:34,449 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.21226296e-01  1.55394087e-02 -4.21536155e-03 -3.50693464e-02
  -1.16036177e-01 -1.49936080e-01  1.71448722e-01 -2.02328384e-01
   1.50608242e-01 -1.89427882e-01 -1.51695877e-01 -2.88513392e-01
  -1.38936192e-01 -2.40635015e-02  1.10115699e-01  2.47410648e-02
  -1.09313622e-01 -7.76984617e-02  1.18559636e-01  1.63395889e-05
   6.94250762e-02  1.26483127e-01 -8.15223232e-02  3.58652055e-01
  -2.48185799e-01 -4.05825526e-02 -6.21717423e-03 -9.90855992e-02
   2.33682334e-01  1.28416182e-03  8.41592699e-02  1.94624186e-01
  -1.30590484e-01  2.06219271e-01 -2.09323987e-01 -4.58498560e-02
   1.80267002e-02 -1.85623020e-01 -6.45408928e-02 -5.27156852e-02
   2.19942685e-02  1.64211988e-02  1.89022839e-01  2.76394077e-02
   1.54311001e-01 -9.31595862e-02  5.32588512e-02 -3.74036133e-02
   1.49817199e-01  3.58800367e-02]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.21226296e-01,  1.55394087e-02, -4.21536155e-03,
        -3.50693464e-02, -1.16036177e-01, -1.49936080e-01,
         1.71448722e-01, -2.02328384e-01,  1.50608242e-01,
        -1.89427882e-01, -1.51695877e-01, -2.88513392e-01,
        -1.38936192e-01, -2.40635015e-02,  1.10115699e-01,
         2.47410648e-02, -1.09313622e-01, -7.76984617e-02,
         1.18559636e-01,  1.63395889e-05,  6.94250762e-02,
         1.26483127e-01, -8.15223232e-02,  3.58652055e-01,
        -2.48185799e-01, -4.05825526e-02, -6.21717423e-03,
        -9.90855992e-02,  2.33682334e-01,  1.28416182e-03,
         8.41592699e-02,  1.94624186e-01, -1.30590484e-01,
         2.06219271e-01, -2.09323987e-01, -4.58498560e-02,
         1.80267002e-02, -1.85623020e-01, -6.45408928e-02,
        -5.27156852e-02,  2.19942685e-02,  1.64211988e-02,
         1.89022839e-01,  2.76394077e-02,  1.54311001e-01,
        -9.31595862e-02,  5.32588512e-02, -3.74036133e-02,
         1.49817199e-01,  3.58800367e-02]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bebe0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2de570; to 'JaxprTracer' at 0x7f74dc2de5c0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc29d4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:34,449 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.21226296e-01  1.55394087e-02 -4.21536155e-03 -3.50693464e-02
  -1.16036177e-01 -1.49936080e-01  1.71448722e-01 -2.02328384e-01
   1.50608242e-01 -1.89427882e-01 -1.51695877e-01 -2.88513392e-01
  -1.38936192e-01 -2.40635015e-02  1.10115699e-01  2.47410648e-02
  -1.09313622e-01 -7.76984617e-02  1.18559636e-01  1.63395889e-05
   6.94250762e-02  1.26483127e-01 -8.15223232e-02  3.58652055e-01
  -2.48185799e-01 -4.05825526e-02 -6.21717423e-03 -9.90855992e-02
   2.33682334e-01  1.28416182e-03  8.41592699e-02  1.94624186e-01
  -1.30590484e-01  2.06219271e-01 -2.09323987e-01 -4.58498560e-02
   1.80267002e-02 -1.85623020e-01 -6.45408928e-02 -5.27156852e-02
   2.19942685e-02  1.64211988e-02  1.89022839e-01  2.76394077e-02
   1.54311001e-01 -9.31595862e-02  5.32588512e-02 -3.74036133e-02
   1.49817199e-01  3.58800367e-02]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.21226296e-01,  1.55394087e-02, -4.21536155e-03,
        -3.50693464e-02, -1.16036177e-01, -1.49936080e-01,
         1.71448722e-01, -2.02328384e-01,  1.50608242e-01,
        -1.89427882e-01, -1.51695877e-01, -2.88513392e-01,
        -1.38936192e-01, -2.40635015e-02,  1.10115699e-01,
         2.47410648e-02, -1.09313622e-01, -7.76984617e-02,
         1.18559636e-01,  1.63395889e-05,  6.94250762e-02,
         1.26483127e-01, -8.15223232e-02,  3.58652055e-01,
        -2.48185799e-01, -4.05825526e-02, -6.21717423e-03,
        -9.90855992e-02,  2.33682334e-01,  1.28416182e-03,
         8.41592699e-02,  1.94624186e-01, -1.30590484e-01,
         2.06219271e-01, -2.09323987e-01, -4.58498560e-02,
         1.80267002e-02, -1.85623020e-01, -6.45408928e-02,
        -5.27156852e-02,  2.19942685e-02,  1.64211988e-02,
         1.89022839e-01,  2.76394077e-02,  1.54311001e-01,
        -9.31595862e-02,  5.32588512e-02, -3.74036133e-02,
         1.49817199e-01,  3.58800367e-02]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bebe0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2de570; to 'JaxprTracer' at 0x7f74dc2de5c0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc29d4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:34,466 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:34,466 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:34,466 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:34,466 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.21226296e-01  1.55394087e-02 -4.21536155e-03 -3.50693464e-02
  -1.16036177e-01 -1.49936080e-01  1.71448722e-01 -2.02328384e-01
   1.50608242e-01 -1.89427882e-01 -1.51695877e-01 -2.88513392e-01
  -1.38936192e-01 -2.40635015e-02  1.10115699e-01  2.47410648e-02
  -1.09313622e-01 -7.76984617e-02  1.18559636e-01  1.63395889e-05
   6.94250762e-02  1.26483127e-01 -8.15223232e-02  3.58652055e-01
  -2.48185799e-01 -4.05825526e-02 -6.21717423e-03 -9.90855992e-02
   2.33682334e-01  1.28416182e-03  8.41592699e-02  1.94624186e-01
  -1.30590484e-01  2.06219271e-01 -2.09323987e-01 -4.58498560e-02
   1.80267002e-02 -1.85623020e-01 -6.45408928e-02 -5.27156852e-02
   2.19942685e-02  1.64211988e-02  1.89022839e-01  2.76394077e-02
   1.54311001e-01 -9.31595862e-02  5.32588512e-02 -3.74036133e-02
   1.49817199e-01  3.58800367e-02]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.21226296e-01,  1.55394087e-02, -4.21536155e-03,
        -3.50693464e-02, -1.16036177e-01, -1.49936080e-01,
         1.71448722e-01, -2.02328384e-01,  1.50608242e-01,
        -1.89427882e-01, -1.51695877e-01, -2.88513392e-01,
        -1.38936192e-01, -2.40635015e-02,  1.10115699e-01,
         2.47410648e-02, -1.09313622e-01, -7.76984617e-02,
         1.18559636e-01,  1.63395889e-05,  6.94250762e-02,
         1.26483127e-01, -8.15223232e-02,  3.58652055e-01,
        -2.48185799e-01, -4.05825526e-02, -6.21717423e-03,
        -9.90855992e-02,  2.33682334e-01,  1.28416182e-03,
         8.41592699e-02,  1.94624186e-01, -1.30590484e-01,
         2.06219271e-01, -2.09323987e-01, -4.58498560e-02,
         1.80267002e-02, -1.85623020e-01, -6.45408928e-02,
        -5.27156852e-02,  2.19942685e-02,  1.64211988e-02,
         1.89022839e-01,  2.76394077e-02,  1.54311001e-01,
        -9.31595862e-02,  5.32588512e-02, -3.74036133e-02,
         1.49817199e-01,  3.58800367e-02]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bebe0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2de570; to 'JaxprTracer' at 0x7f74dc2de5c0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc29d4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:34,466 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46459672 0.4462893  0.50639963 0.46791694 0.48305067 0.5191798 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46459672, 0.4462893 , 0.50639963, 0.46791694, 0.48305067,
        0.5191798 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be380>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f9210; to 'JaxprTracer' at 0x7f74dc2f9300>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc290bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:34,491 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:34,491 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:34,491 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:34,491 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bedd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24851936 0.24479263 0.24999721 0.24833992 0.24954498 0.24975455]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2fbbf0; to 'JaxprTracer' at 0x7f74dc2f98a0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:34,491 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be300>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235c60; to 'JaxprTracer' at 0x7f74dc236fc0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2819b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0., 0., 0., 0., 0.]], dtype=float32)
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be2f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2306d0; to 'JaxprTracer' at 0x7f74dc231a30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc3fc8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8130; to 'JaxprTracer' at 0x7f74dc2f8770>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc497930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:34,512 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:34,512 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:34,512 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:34,512 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:34,512 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be300>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235c60; to 'JaxprTracer' at 0x7f74dc236fc0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2819b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:34,560 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:34,561 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:34,561 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:34,561 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bedd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24851936 0.24479263 0.24999721 0.24833992 0.24954498 0.24975455]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2fbbf0; to 'JaxprTracer' at 0x7f74dc2f98a0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:34,561 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be300>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235c60; to 'JaxprTracer' at 0x7f74dc236fc0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2819b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0., 0., 0., 0., 0.]], dtype=float32)
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be2f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2306d0; to 'JaxprTracer' at 0x7f74dc231a30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc3fc8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:34,584 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:34,584 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:34,584 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:34,584 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bedd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24851936 0.24479263 0.24999721 0.24833992 0.24954498 0.24975455]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2fbbf0; to 'JaxprTracer' at 0x7f74dc2f98a0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be300>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235c60; to 'JaxprTracer' at 0x7f74dc236fc0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2819b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:34,584 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0., 0., 0., 0., 0.]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01340934 0.13615024 0.1337473  0.01206766 0.02050044 0.2651717 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01340934, 0.13615024, 0.1337473 , 0.01206766, 0.02050044,
        0.2651717 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be2f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2306d0; to 'JaxprTracer' at 0x7f74dc231a30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc3fc8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:34,773 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:34,774 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:34,774 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:34,774 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bece0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0e6b10; to 'JaxprTracer' at 0x7f74dc0e6c00>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2cc0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf0a0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0ea200; to 'JaxprTracer' at 0x7f74dc0ea1b0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc454ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:34,774 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.74507457 -0.11339739]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.74507457, -0.11339739]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be300>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235c60; to 'JaxprTracer' at 0x7f74dc236fc0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2819b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:34,794 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:34,794 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:34,795 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:34,795 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bedd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24851936 0.24479263 0.24999721 0.24833992 0.24954498 0.24975455]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc2fbbf0; to 'JaxprTracer' at 0x7f74dc2f98a0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:34,795 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346 ]
 [-0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 ],
       [-0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bed10>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0eb510; to 'JaxprTracer' at 0x7f74dc0eb790>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c45b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bece0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0e6b10; to 'JaxprTracer' at 0x7f74dc0e6c00>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2cc0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf0a0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0ea200; to 'JaxprTracer' at 0x7f74dc0ea1b0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc454ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:34,983 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:34,983 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:34,983 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:34,983 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:34,983 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf7f0>, in_tracers=(Traced<ConcreteArray(0.05000000074505806, dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0f0db0; to 'JaxprTracer' at 0x7f74dc0f0950>], out_avals=[ShapedArray(float32[1,2])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a1f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf210>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0f1cb0; to 'JaxprTracer' at 0x7f74dc0f1d00>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4acaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf720>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f3420; to 'JaxprTracer' at 0x7f74dc0f2bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc255ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bece0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0e6b10; to 'JaxprTracer' at 0x7f74dc0e6c00>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2cc0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf0a0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0ea200; to 'JaxprTracer' at 0x7f74dc0ea1b0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc454ef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:34,997 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:34,997 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:34,997 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:34,997 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf7f0>, in_tracers=(Traced<ConcreteArray(0.05000000074505806, dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0f0db0; to 'JaxprTracer' at 0x7f74dc0f0950>], out_avals=[ShapedArray(float32[1,2])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a1f70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf210>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc0f1cb0; to 'JaxprTracer' at 0x7f74dc0f1d00>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4acaf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf720>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f3420; to 'JaxprTracer' at 0x7f74dc0f2bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc255ff0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:34,998 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8130; to 'JaxprTracer' at 0x7f74dc2f8770>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc497930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:35,225 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:35,225 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:35,225 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:35,225 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfa10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc108720; to 'JaxprTracer' at 0x7f74dc28dcb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2466b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10ae80; to 'JaxprTracer' at 0x7f74dc10af70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a1230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:35,225 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8130; to 'JaxprTracer' at 0x7f74dc2f8770>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc497930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:35,243 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:35,243 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:35,243 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:35,244 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be350>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc416250; to 'JaxprTracer' at 0x7f74dc417420>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2837f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8130; to 'JaxprTracer' at 0x7f74dc2f8770>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc497930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:35,244 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.21226296e-01  1.55394087e-02 -4.21536155e-03 -3.50693464e-02
  -1.16036177e-01 -1.49936080e-01  1.71448722e-01 -2.02328384e-01
   1.50608242e-01 -1.89427882e-01 -1.51695877e-01 -2.88513392e-01
  -1.38936192e-01 -2.40635015e-02  1.10115699e-01  2.47410648e-02
  -1.09313622e-01 -7.76984617e-02  1.18559636e-01  1.63395889e-05
   6.94250762e-02  1.26483127e-01 -8.15223232e-02  3.58652055e-01
  -2.48185799e-01 -4.05825526e-02 -6.21717423e-03 -9.90855992e-02
   2.33682334e-01  1.28416182e-03  8.41592699e-02  1.94624186e-01
  -1.30590484e-01  2.06219271e-01 -2.09323987e-01 -4.58498560e-02
   1.80267002e-02 -1.85623020e-01 -6.45408928e-02 -5.27156852e-02
   2.19942685e-02  1.64211988e-02  1.89022839e-01  2.76394077e-02
   1.54311001e-01 -9.31595862e-02  5.32588512e-02 -3.74036133e-02
   1.49817199e-01  3.58800367e-02]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.21226296e-01,  1.55394087e-02, -4.21536155e-03,
        -3.50693464e-02, -1.16036177e-01, -1.49936080e-01,
         1.71448722e-01, -2.02328384e-01,  1.50608242e-01,
        -1.89427882e-01, -1.51695877e-01, -2.88513392e-01,
        -1.38936192e-01, -2.40635015e-02,  1.10115699e-01,
         2.47410648e-02, -1.09313622e-01, -7.76984617e-02,
         1.18559636e-01,  1.63395889e-05,  6.94250762e-02,
         1.26483127e-01, -8.15223232e-02,  3.58652055e-01,
        -2.48185799e-01, -4.05825526e-02, -6.21717423e-03,
        -9.90855992e-02,  2.33682334e-01,  1.28416182e-03,
         8.41592699e-02,  1.94624186e-01, -1.30590484e-01,
         2.06219271e-01, -2.09323987e-01, -4.58498560e-02,
         1.80267002e-02, -1.85623020e-01, -6.45408928e-02,
        -5.27156852e-02,  2.19942685e-02,  1.64211988e-02,
         1.89022839e-01,  2.76394077e-02,  1.54311001e-01,
        -9.31595862e-02,  5.32588512e-02, -3.74036133e-02,
         1.49817199e-01,  3.58800367e-02]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb40>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b380; to 'JaxprTracer' at 0x7f74dc10b470>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a32b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfaf0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b920; to 'JaxprTracer' at 0x7f74dc10ba10>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d3430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:35,299 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:35,299 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:35,300 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:35,300 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.03769319  0.3095465   0.          0.          0.98262835  1.4720888
  -0.5412596   0.34616098 -0.08871493  0.45884863  0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.98262835,
         1.4720888 , -0.5412596 ,  0.34616098, -0.08871493,  0.45884863,
         0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,12])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf980>, in_tracers=(Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc110ea0; to 'JaxprTracer' at 0x7f74dc1119e0>], out_avals=[ShapedArray(float32[1,12])], primitive=concatenate, params={'dimension': 1}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4b0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:35,300 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.21226296e-01  1.55394087e-02 -4.21536155e-03 -3.50693464e-02
  -1.16036177e-01 -1.49936080e-01  1.71448722e-01 -2.02328384e-01
   1.50608242e-01 -1.89427882e-01 -1.51695877e-01 -2.88513392e-01
  -1.38936192e-01 -2.40635015e-02  1.10115699e-01  2.47410648e-02
  -1.09313622e-01 -7.76984617e-02  1.18559636e-01  1.63395889e-05
   6.94250762e-02  1.26483127e-01 -8.15223232e-02  3.58652055e-01
  -2.48185799e-01 -4.05825526e-02 -6.21717423e-03 -9.90855992e-02
   2.33682334e-01  1.28416182e-03  8.41592699e-02  1.94624186e-01
  -1.30590484e-01  2.06219271e-01 -2.09323987e-01 -4.58498560e-02
   1.80267002e-02 -1.85623020e-01 -6.45408928e-02 -5.27156852e-02
   2.19942685e-02  1.64211988e-02  1.89022839e-01  2.76394077e-02
   1.54311001e-01 -9.31595862e-02  5.32588512e-02 -3.74036133e-02
   1.49817199e-01  3.58800367e-02]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.21226296e-01,  1.55394087e-02, -4.21536155e-03,
        -3.50693464e-02, -1.16036177e-01, -1.49936080e-01,
         1.71448722e-01, -2.02328384e-01,  1.50608242e-01,
        -1.89427882e-01, -1.51695877e-01, -2.88513392e-01,
        -1.38936192e-01, -2.40635015e-02,  1.10115699e-01,
         2.47410648e-02, -1.09313622e-01, -7.76984617e-02,
         1.18559636e-01,  1.63395889e-05,  6.94250762e-02,
         1.26483127e-01, -8.15223232e-02,  3.58652055e-01,
        -2.48185799e-01, -4.05825526e-02, -6.21717423e-03,
        -9.90855992e-02,  2.33682334e-01,  1.28416182e-03,
         8.41592699e-02,  1.94624186e-01, -1.30590484e-01,
         2.06219271e-01, -2.09323987e-01, -4.58498560e-02,
         1.80267002e-02, -1.85623020e-01, -6.45408928e-02,
        -5.27156852e-02,  2.19942685e-02,  1.64211988e-02,
         1.89022839e-01,  2.76394077e-02,  1.54311001e-01,
        -9.31595862e-02,  5.32588512e-02, -3.74036133e-02,
         1.49817199e-01,  3.58800367e-02]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb40>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b380; to 'JaxprTracer' at 0x7f74dc10b470>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a32b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:35,354 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:35,354 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:35,354 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:35,354 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.12850852  0.02524408  0.03196523 -0.0278127  -0.08647262 -0.16524027
   0.15929158 -0.18269044  0.13120177 -0.21437132 -0.15189591 -0.34572878
  -0.165775    0.01018795  0.14711088 -0.02410877 -0.14419894 -0.05578595
   0.12290111  0.04398308  0.07165678  0.14693809 -0.07574509  0.44349036
  -0.3241399  -0.01074894  0.0245482  -0.10143796  0.2538694   0.02075449
   0.0677629   0.25429177 -0.14952412  0.26218516 -0.19657178 -0.03346498
   0.00986268 -0.19861135 -0.02660164 -0.07387078  0.03587324 -0.02117559
   0.21318348  0.00621649  0.14263201 -0.15723631  0.09158546 -0.09156126
   0.18400295  0.06898494]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.12850852,  0.02524408,  0.03196523, -0.0278127 , -0.08647262,
        -0.16524027,  0.15929158, -0.18269044,  0.13120177, -0.21437132,
        -0.15189591, -0.34572878, -0.165775  ,  0.01018795,  0.14711088,
        -0.02410877, -0.14419894, -0.05578595,  0.12290111,  0.04398308,
         0.07165678,  0.14693809, -0.07574509,  0.44349036, -0.3241399 ,
        -0.01074894,  0.0245482 , -0.10143796,  0.2538694 ,  0.02075449,
         0.0677629 ,  0.25429177, -0.14952412,  0.26218516, -0.19657178,
        -0.03346498,  0.00986268, -0.19861135, -0.02660164, -0.07387078,
         0.03587324, -0.02117559,  0.21318348,  0.00621649,  0.14263201,
        -0.15723631,  0.09158546, -0.09156126,  0.18400295,  0.06898494]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104070>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119440; to 'JaxprTracer' at 0x7f74dc119490>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d2530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:35,354 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.12850852  0.02524408  0.03196523 -0.0278127  -0.08647262 -0.16524027
   0.15929158 -0.18269044  0.13120177 -0.21437132 -0.15189591 -0.34572878
  -0.165775    0.01018795  0.14711088 -0.02410877 -0.14419894 -0.05578595
   0.12290111  0.04398308  0.07165678  0.14693809 -0.07574509  0.44349036
  -0.3241399  -0.01074894  0.0245482  -0.10143796  0.2538694   0.02075449
   0.0677629   0.25429177 -0.14952412  0.26218516 -0.19657178 -0.03346498
   0.00986268 -0.19861135 -0.02660164 -0.07387078  0.03587324 -0.02117559
   0.21318348  0.00621649  0.14263201 -0.15723631  0.09158546 -0.09156126
   0.18400295  0.06898494]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.12850852,  0.02524408,  0.03196523, -0.0278127 , -0.08647262,
        -0.16524027,  0.15929158, -0.18269044,  0.13120177, -0.21437132,
        -0.15189591, -0.34572878, -0.165775  ,  0.01018795,  0.14711088,
        -0.02410877, -0.14419894, -0.05578595,  0.12290111,  0.04398308,
         0.07165678,  0.14693809, -0.07574509,  0.44349036, -0.3241399 ,
        -0.01074894,  0.0245482 , -0.10143796,  0.2538694 ,  0.02075449,
         0.0677629 ,  0.25429177, -0.14952412,  0.26218516, -0.19657178,
        -0.03346498,  0.00986268, -0.19861135, -0.02660164, -0.07387078,
         0.03587324, -0.02117559,  0.21318348,  0.00621649,  0.14263201,
        -0.15723631,  0.09158546, -0.09156126,  0.18400295,  0.06898494]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104070>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119440; to 'JaxprTracer' at 0x7f74dc119490>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d2530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:35,373 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:35,373 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:35,373 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:35,373 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.12850852  0.02524408  0.03196523 -0.0278127  -0.08647262 -0.16524027
   0.15929158 -0.18269044  0.13120177 -0.21437132 -0.15189591 -0.34572878
  -0.165775    0.01018795  0.14711088 -0.02410877 -0.14419894 -0.05578595
   0.12290111  0.04398308  0.07165678  0.14693809 -0.07574509  0.44349036
  -0.3241399  -0.01074894  0.0245482  -0.10143796  0.2538694   0.02075449
   0.0677629   0.25429177 -0.14952412  0.26218516 -0.19657178 -0.03346498
   0.00986268 -0.19861135 -0.02660164 -0.07387078  0.03587324 -0.02117559
   0.21318348  0.00621649  0.14263201 -0.15723631  0.09158546 -0.09156126
   0.18400295  0.06898494]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.12850852,  0.02524408,  0.03196523, -0.0278127 , -0.08647262,
        -0.16524027,  0.15929158, -0.18269044,  0.13120177, -0.21437132,
        -0.15189591, -0.34572878, -0.165775  ,  0.01018795,  0.14711088,
        -0.02410877, -0.14419894, -0.05578595,  0.12290111,  0.04398308,
         0.07165678,  0.14693809, -0.07574509,  0.44349036, -0.3241399 ,
        -0.01074894,  0.0245482 , -0.10143796,  0.2538694 ,  0.02075449,
         0.0677629 ,  0.25429177, -0.14952412,  0.26218516, -0.19657178,
        -0.03346498,  0.00986268, -0.19861135, -0.02660164, -0.07387078,
         0.03587324, -0.02117559,  0.21318348,  0.00621649,  0.14263201,
        -0.15723631,  0.09158546, -0.09156126,  0.18400295,  0.06898494]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104070>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119440; to 'JaxprTracer' at 0x7f74dc119490>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d2530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:35,373 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4615207  0.42783785 0.4983345  0.45925593 0.47866893 0.5156669 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4615207 , 0.42783785, 0.4983345 , 0.45925593, 0.47866893,
        0.5156669 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfaf0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b920; to 'JaxprTracer' at 0x7f74dc10ba10>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d3430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:35,402 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:35,402 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:35,402 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:35,402 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf960>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2485471  0.24370766 0.24999525 0.24760224 0.24938941 0.24974166]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc112a70; to 'JaxprTracer' at 0x7f74dc1134c0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b4e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:35,402 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf510>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc269e90; to 'JaxprTracer' at 0x7f74dc268e50>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc245630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8540; to 'JaxprTracer' at 0x7f74dc2f9b20>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b69f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf880>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f93a0; to 'JaxprTracer' at 0x7f74dc2f9490>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfa10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc108720; to 'JaxprTracer' at 0x7f74dc28dcb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2466b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10ae80; to 'JaxprTracer' at 0x7f74dc10af70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a1230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:35,427 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:35,427 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:35,427 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:35,427 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:35,427 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf510>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc269e90; to 'JaxprTracer' at 0x7f74dc268e50>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc245630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:35,497 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:35,498 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:35,498 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:35,498 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf960>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2485471  0.24370766 0.24999525 0.24760224 0.24938941 0.24974166]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc112a70; to 'JaxprTracer' at 0x7f74dc1134c0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b4e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:35,498 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfff0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119620; to 'JaxprTracer' at 0x7f74dc1195d0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4981f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8540; to 'JaxprTracer' at 0x7f74dc2f9b20>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b69f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf880>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f93a0; to 'JaxprTracer' at 0x7f74dc2f9490>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:35,522 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:35,522 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:35,522 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:35,522 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf960>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2485471  0.24370766 0.24999525 0.24760224 0.24938941 0.24974166]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc112a70; to 'JaxprTracer' at 0x7f74dc1134c0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b4e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfff0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119620; to 'JaxprTracer' at 0x7f74dc1195d0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4981f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:35,522 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Array([[0.8030522 , 1.5505867 , 0.9809952 , 0.7953497 , 0.82262284,
        1.4216337 ]], dtype=float32)
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.14788514  0.3320611   0.10817531 -0.16251689 -0.02009537  0.13942517]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.14788514,  0.3320611 ,  0.10817531, -0.16251689, -0.02009537,
         0.13942517]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f8540; to 'JaxprTracer' at 0x7f74dc2f9b20>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b69f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01183505 0.22838134 0.14020383 0.01014809 0.01966484 0.33856967]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01183505, 0.22838134, 0.14020383, 0.01014809, 0.01966484,
        0.33856967]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf880>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f93a0; to 'JaxprTracer' at 0x7f74dc2f9490>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4a0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:35,955 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:35,955 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:35,955 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:35,955 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1042c0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc120e50; to 'JaxprTracer' at 0x7f74dc121210>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2ccbb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1045d0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc122de0; to 'JaxprTracer' at 0x7f74dc122d90>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104d70>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1367f0; to 'JaxprTracer' at 0x7f74dc1367a0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13b4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:35,955 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.0807346  -0.20841336]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.0807346 , -0.20841336]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfff0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc119620; to 'JaxprTracer' at 0x7f74dc1195d0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4981f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
2023-12-05 15:22:35,980 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:35,980 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:35,980 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:35,981 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf960>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2485471  0.24370766 0.24999525 0.24760224 0.24938941 0.24974166]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc112a70; to 'JaxprTracer' at 0x7f74dc1134c0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2b4e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:35,981 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016]
 [-0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016],
       [-0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104800>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc137d30; to 'JaxprTracer' at 0x7f74dc137dd0>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc141e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1042c0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc120e50; to 'JaxprTracer' at 0x7f74dc121210>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2ccbb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1045d0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc122de0; to 'JaxprTracer' at 0x7f74dc122d90>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104d70>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1367f0; to 'JaxprTracer' at 0x7f74dc1367a0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13b4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:36,303 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:36,303 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:36,303 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:36,303 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:36,303 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1056d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc14a570; to 'JaxprTracer' at 0x7f74dc14ad40>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15c4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1053d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc14a890; to 'JaxprTracer' at 0x7f74dc14aa70>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15ce70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1056a0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149fd0; to 'JaxprTracer' at 0x7f74dc14a020>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15cf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1042c0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc120e50; to 'JaxprTracer' at 0x7f74dc121210>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2ccbb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1045d0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc122de0; to 'JaxprTracer' at 0x7f74dc122d90>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc104d70>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1367f0; to 'JaxprTracer' at 0x7f74dc1367a0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13b4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:36,315 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:36,315 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:36,315 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:36,315 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1056d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc14a570; to 'JaxprTracer' at 0x7f74dc14ad40>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15c4f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1053d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc14a890; to 'JaxprTracer' at 0x7f74dc14aa70>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15ce70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1056a0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149fd0; to 'JaxprTracer' at 0x7f74dc14a020>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15cf70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:36,315 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfa10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc108720; to 'JaxprTracer' at 0x7f74dc28dcb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2466b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10ae80; to 'JaxprTracer' at 0x7f74dc10af70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a1230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:36,538 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:36,538 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:36,538 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:36,538 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f92b0; to 'JaxprTracer' at 0x7f74dc2f96c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1852b0; to 'JaxprTracer' at 0x7f74dc1853a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:36,538 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.98262835, 1.4720888 ]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.5412596   0.34616098]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.5412596 ,  0.34616098]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1059a0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1864d0; to 'JaxprTracer' at 0x7f74dc186430>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc16abb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[-0.08871493,  0.45884863]], dtype=float32)
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.17058562 -0.06457035]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.17058562, -0.06457035]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1059f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186b10; to 'JaxprTracer' at 0x7f74dc186a70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc16bf30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfa10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc108720; to 'JaxprTracer' at 0x7f74dc28dcb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2466b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10ae80; to 'JaxprTracer' at 0x7f74dc10af70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a1230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:36,559 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:36,559 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:36,559 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:36,560 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc0f1df0; to 'JaxprTracer' at 0x7f74dc0f2610>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2c39b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf1b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2de660; to 'JaxprTracer' at 0x7f74dc2dfab0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc25cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfa10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc108720; to 'JaxprTracer' at 0x7f74dc28dcb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2466b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf770>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10ae80; to 'JaxprTracer' at 0x7f74dc10af70>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a1230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:36,560 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.12850852  0.02524408  0.03196523 -0.0278127  -0.08647262 -0.16524027
   0.15929158 -0.18269044  0.13120177 -0.21437132 -0.15189591 -0.34572878
  -0.165775    0.01018795  0.14711088 -0.02410877 -0.14419894 -0.05578595
   0.12290111  0.04398308  0.07165678  0.14693809 -0.07574509  0.44349036
  -0.3241399  -0.01074894  0.0245482  -0.10143796  0.2538694   0.02075449
   0.0677629   0.25429177 -0.14952412  0.26218516 -0.19657178 -0.03346498
   0.00986268 -0.19861135 -0.02660164 -0.07387078  0.03587324 -0.02117559
   0.21318348  0.00621649  0.14263201 -0.15723631  0.09158546 -0.09156126
   0.18400295  0.06898494]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.12850852,  0.02524408,  0.03196523, -0.0278127 , -0.08647262,
        -0.16524027,  0.15929158, -0.18269044,  0.13120177, -0.21437132,
        -0.15189591, -0.34572878, -0.165775  ,  0.01018795,  0.14711088,
        -0.02410877, -0.14419894, -0.05578595,  0.12290111,  0.04398308,
         0.07165678,  0.14693809, -0.07574509,  0.44349036, -0.3241399 ,
        -0.01074894,  0.0245482 , -0.10143796,  0.2538694 ,  0.02075449,
         0.0677629 ,  0.25429177, -0.14952412,  0.26218516, -0.19657178,
        -0.03346498,  0.00986268, -0.19861135, -0.02660164, -0.07387078,
         0.03587324, -0.02117559,  0.21318348,  0.00621649,  0.14263201,
        -0.15723631,  0.09158546, -0.09156126,  0.18400295,  0.06898494]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1058f0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1857b0; to 'JaxprTracer' at 0x7f74dc1858a0>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc100d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105a30>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc185e40; to 'JaxprTracer' at 0x7f74dc185da0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc169fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:36,585 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:36,585 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:36,585 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:36,585 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.03769319  0.3095465   0.          0.          0.9555654   1.4893968
  -1.2726634   0.6715623  -0.07996871  0.4567322   0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.9555654 ,
         1.4893968 , -1.2726634 ,  0.6715623 , -0.07996871,  0.4567322 ,
         0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,12])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1054d0>, in_tracers=(Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1948b0; to 'JaxprTracer' at 0x7f74dc1944a0>], out_avals=[ShapedArray(float32[1,12])], primitive=concatenate, params={'dimension': 1}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc14cab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:36,585 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.12850852  0.02524408  0.03196523 -0.0278127  -0.08647262 -0.16524027
   0.15929158 -0.18269044  0.13120177 -0.21437132 -0.15189591 -0.34572878
  -0.165775    0.01018795  0.14711088 -0.02410877 -0.14419894 -0.05578595
   0.12290111  0.04398308  0.07165678  0.14693809 -0.07574509  0.44349036
  -0.3241399  -0.01074894  0.0245482  -0.10143796  0.2538694   0.02075449
   0.0677629   0.25429177 -0.14952412  0.26218516 -0.19657178 -0.03346498
   0.00986268 -0.19861135 -0.02660164 -0.07387078  0.03587324 -0.02117559
   0.21318348  0.00621649  0.14263201 -0.15723631  0.09158546 -0.09156126
   0.18400295  0.06898494]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.12850852,  0.02524408,  0.03196523, -0.0278127 , -0.08647262,
        -0.16524027,  0.15929158, -0.18269044,  0.13120177, -0.21437132,
        -0.15189591, -0.34572878, -0.165775  ,  0.01018795,  0.14711088,
        -0.02410877, -0.14419894, -0.05578595,  0.12290111,  0.04398308,
         0.07165678,  0.14693809, -0.07574509,  0.44349036, -0.3241399 ,
        -0.01074894,  0.0245482 , -0.10143796,  0.2538694 ,  0.02075449,
         0.0677629 ,  0.25429177, -0.14952412,  0.26218516, -0.19657178,
        -0.03346498,  0.00986268, -0.19861135, -0.02660164, -0.07387078,
         0.03587324, -0.02117559,  0.21318348,  0.00621649,  0.14263201,
        -0.15723631,  0.09158546, -0.09156126,  0.18400295,  0.06898494]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1058f0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1857b0; to 'JaxprTracer' at 0x7f74dc1858a0>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc100d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:36,637 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:36,637 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:36,637 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:36,637 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-9.80716720e-02  4.45445552e-02  8.60986263e-02 -7.48960488e-03
   8.97478312e-03 -1.69817373e-01  1.00406349e-01 -1.00332543e-01
   7.12870657e-02 -2.21936062e-01 -1.29444152e-01 -3.89000952e-01
  -1.65243998e-01  6.62800446e-02  1.83350742e-01 -9.63672847e-02
  -2.01711923e-01 -2.09589750e-02  1.11673556e-01  1.20168343e-01
   6.78391531e-02  1.64363086e-01 -4.16060537e-02  5.08584499e-01
  -3.90465647e-01  5.95526099e-02  8.96490142e-02 -9.41523761e-02
   2.32220247e-01  5.24550378e-02  3.06629315e-02  3.09917212e-01
  -1.50215939e-01  3.12860847e-01 -1.35204613e-01  4.47111949e-03
   3.32830474e-04 -1.79126859e-01  4.73625436e-02 -7.71797895e-02
   5.73820993e-02 -9.28010494e-02  2.12809414e-01 -5.60057983e-02
   7.92342722e-02 -2.34246790e-01  1.53864071e-01 -1.71387434e-01
   1.93845958e-01  1.17860898e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-9.80716720e-02,  4.45445552e-02,  8.60986263e-02,
        -7.48960488e-03,  8.97478312e-03, -1.69817373e-01,
         1.00406349e-01, -1.00332543e-01,  7.12870657e-02,
        -2.21936062e-01, -1.29444152e-01, -3.89000952e-01,
        -1.65243998e-01,  6.62800446e-02,  1.83350742e-01,
        -9.63672847e-02, -2.01711923e-01, -2.09589750e-02,
         1.11673556e-01,  1.20168343e-01,  6.78391531e-02,
         1.64363086e-01, -4.16060537e-02,  5.08584499e-01,
        -3.90465647e-01,  5.95526099e-02,  8.96490142e-02,
        -9.41523761e-02,  2.32220247e-01,  5.24550378e-02,
         3.06629315e-02,  3.09917212e-01, -1.50215939e-01,
         3.12860847e-01, -1.35204613e-01,  4.47111949e-03,
         3.32830474e-04, -1.79126859e-01,  4.73625436e-02,
        -7.71797895e-02,  5.73820993e-02, -9.28010494e-02,
         2.12809414e-01, -5.60057983e-02,  7.92342722e-02,
        -2.34246790e-01,  1.53864071e-01, -1.71387434e-01,
         1.93845958e-01,  1.17860898e-01]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105f80>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1904f0; to 'JaxprTracer' at 0x7f74dc190540>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1691b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:36,637 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-9.80716720e-02  4.45445552e-02  8.60986263e-02 -7.48960488e-03
   8.97478312e-03 -1.69817373e-01  1.00406349e-01 -1.00332543e-01
   7.12870657e-02 -2.21936062e-01 -1.29444152e-01 -3.89000952e-01
  -1.65243998e-01  6.62800446e-02  1.83350742e-01 -9.63672847e-02
  -2.01711923e-01 -2.09589750e-02  1.11673556e-01  1.20168343e-01
   6.78391531e-02  1.64363086e-01 -4.16060537e-02  5.08584499e-01
  -3.90465647e-01  5.95526099e-02  8.96490142e-02 -9.41523761e-02
   2.32220247e-01  5.24550378e-02  3.06629315e-02  3.09917212e-01
  -1.50215939e-01  3.12860847e-01 -1.35204613e-01  4.47111949e-03
   3.32830474e-04 -1.79126859e-01  4.73625436e-02 -7.71797895e-02
   5.73820993e-02 -9.28010494e-02  2.12809414e-01 -5.60057983e-02
   7.92342722e-02 -2.34246790e-01  1.53864071e-01 -1.71387434e-01
   1.93845958e-01  1.17860898e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-9.80716720e-02,  4.45445552e-02,  8.60986263e-02,
        -7.48960488e-03,  8.97478312e-03, -1.69817373e-01,
         1.00406349e-01, -1.00332543e-01,  7.12870657e-02,
        -2.21936062e-01, -1.29444152e-01, -3.89000952e-01,
        -1.65243998e-01,  6.62800446e-02,  1.83350742e-01,
        -9.63672847e-02, -2.01711923e-01, -2.09589750e-02,
         1.11673556e-01,  1.20168343e-01,  6.78391531e-02,
         1.64363086e-01, -4.16060537e-02,  5.08584499e-01,
        -3.90465647e-01,  5.95526099e-02,  8.96490142e-02,
        -9.41523761e-02,  2.32220247e-01,  5.24550378e-02,
         3.06629315e-02,  3.09917212e-01, -1.50215939e-01,
         3.12860847e-01, -1.35204613e-01,  4.47111949e-03,
         3.32830474e-04, -1.79126859e-01,  4.73625436e-02,
        -7.71797895e-02,  5.73820993e-02, -9.28010494e-02,
         2.12809414e-01, -5.60057983e-02,  7.92342722e-02,
        -2.34246790e-01,  1.53864071e-01, -1.71387434e-01,
         1.93845958e-01,  1.17860898e-01]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105f80>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1904f0; to 'JaxprTracer' at 0x7f74dc190540>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1691b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:36,654 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:36,654 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:36,654 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:36,654 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-9.80716720e-02  4.45445552e-02  8.60986263e-02 -7.48960488e-03
   8.97478312e-03 -1.69817373e-01  1.00406349e-01 -1.00332543e-01
   7.12870657e-02 -2.21936062e-01 -1.29444152e-01 -3.89000952e-01
  -1.65243998e-01  6.62800446e-02  1.83350742e-01 -9.63672847e-02
  -2.01711923e-01 -2.09589750e-02  1.11673556e-01  1.20168343e-01
   6.78391531e-02  1.64363086e-01 -4.16060537e-02  5.08584499e-01
  -3.90465647e-01  5.95526099e-02  8.96490142e-02 -9.41523761e-02
   2.32220247e-01  5.24550378e-02  3.06629315e-02  3.09917212e-01
  -1.50215939e-01  3.12860847e-01 -1.35204613e-01  4.47111949e-03
   3.32830474e-04 -1.79126859e-01  4.73625436e-02 -7.71797895e-02
   5.73820993e-02 -9.28010494e-02  2.12809414e-01 -5.60057983e-02
   7.92342722e-02 -2.34246790e-01  1.53864071e-01 -1.71387434e-01
   1.93845958e-01  1.17860898e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-9.80716720e-02,  4.45445552e-02,  8.60986263e-02,
        -7.48960488e-03,  8.97478312e-03, -1.69817373e-01,
         1.00406349e-01, -1.00332543e-01,  7.12870657e-02,
        -2.21936062e-01, -1.29444152e-01, -3.89000952e-01,
        -1.65243998e-01,  6.62800446e-02,  1.83350742e-01,
        -9.63672847e-02, -2.01711923e-01, -2.09589750e-02,
         1.11673556e-01,  1.20168343e-01,  6.78391531e-02,
         1.64363086e-01, -4.16060537e-02,  5.08584499e-01,
        -3.90465647e-01,  5.95526099e-02,  8.96490142e-02,
        -9.41523761e-02,  2.32220247e-01,  5.24550378e-02,
         3.06629315e-02,  3.09917212e-01, -1.50215939e-01,
         3.12860847e-01, -1.35204613e-01,  4.47111949e-03,
         3.32830474e-04, -1.79126859e-01,  4.73625436e-02,
        -7.71797895e-02,  5.73820993e-02, -9.28010494e-02,
         2.12809414e-01, -5.60057983e-02,  7.92342722e-02,
        -2.34246790e-01,  1.53864071e-01, -1.71387434e-01,
         1.93845958e-01,  1.17860898e-01]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105f80>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1904f0; to 'JaxprTracer' at 0x7f74dc190540>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1691b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:36,654 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.46188328 0.4206757  0.49782002 0.45103306 0.47528988 0.5160731 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.46188328, 0.4206757 , 0.49782002, 0.45103306, 0.47528988,
        0.5160731 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105a30>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc185e40; to 'JaxprTracer' at 0x7f74dc185da0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc169fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:36,680 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:36,680 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:36,681 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:36,681 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bf0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2487581  0.24378462 0.24998105 0.24668233 0.24921699 0.24960613]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc196570; to 'JaxprTracer' at 0x7f74dc1957b0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc455fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:36,681 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb00>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc112660; to 'JaxprTracer' at 0x7f74dc1109a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc27eb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1053e0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10a7a0; to 'JaxprTracer' at 0x7f74dc10a160>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc141330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1055f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc268ae0; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15c2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105600>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f89a0; to 'JaxprTracer' at 0x7f74dc2f9170>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1034f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f92b0; to 'JaxprTracer' at 0x7f74dc2f96c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1852b0; to 'JaxprTracer' at 0x7f74dc1853a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:36,703 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:36,703 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:36,703 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:36,703 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:36,703 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb00>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc112660; to 'JaxprTracer' at 0x7f74dc1109a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc27eb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:36,778 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:36,778 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:36,779 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:36,779 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bf0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2487581  0.24378462 0.24998105 0.24668233 0.24921699 0.24960613]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc196570; to 'JaxprTracer' at 0x7f74dc1957b0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc455fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:36,779 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bd0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc190e50; to 'JaxprTracer' at 0x7f74dc1928e0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc290b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1053e0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10a7a0; to 'JaxprTracer' at 0x7f74dc10a160>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc141330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1055f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc268ae0; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15c2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105600>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f89a0; to 'JaxprTracer' at 0x7f74dc2f9170>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1034f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:36,804 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:36,805 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:36,805 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:36,805 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bf0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2487581  0.24378462 0.24998105 0.24668233 0.24921699 0.24960613]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc196570; to 'JaxprTracer' at 0x7f74dc1957b0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc455fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bd0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc190e50; to 'JaxprTracer' at 0x7f74dc1928e0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc290b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:36,805 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.81044644 1.5339837  0.9755864  0.80347556 0.8236276  1.4146624 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.81044644, 1.5339837 , 0.9755864 , 0.80347556, 0.8236276 ,
        1.4146624 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1053e0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10a7a0; to 'JaxprTracer' at 0x7f74dc10a160>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc141330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.34772223  0.78077507  0.20986322 -0.31528747 -0.09510427  0.3806889 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.34772223,  0.78077507,  0.20986322, -0.31528747, -0.09510427,
         0.3806889 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1055f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc268ae0; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15c2f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01169532 0.30536348 0.1410668  0.00991554 0.0185322  0.4261318 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01169532, 0.30536348, 0.1410668 , 0.00991554, 0.0185322 ,
        0.4261318 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105600>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f89a0; to 'JaxprTracer' at 0x7f74dc2f9170>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1034f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:36,961 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:36,961 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:36,961 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:36,961 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106230>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b0d10; to 'JaxprTracer' at 0x7f74dc1b0cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a0630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106540>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b1fd0; to 'JaxprTracer' at 0x7f74dc1b1f80>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106d30>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1c11c0; to 'JaxprTracer' at 0x7f74dc1c1170>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c5ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:36,961 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4118016 -0.3398308]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4118016, -0.3398308]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bd0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc190e50; to 'JaxprTracer' at 0x7f74dc1928e0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc290b70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
2023-12-05 15:22:36,984 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:36,985 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:36,985 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:36,985 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105bf0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2487581  0.24378462 0.24998105 0.24668233 0.24921699 0.24960613]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc196570; to 'JaxprTracer' at 0x7f74dc1957b0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc455fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:36,985 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861]
 [-0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861],
       [-0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1065e0>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1c2750; to 'JaxprTracer' at 0x7f74dc1c21b0>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c5270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106230>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b0d10; to 'JaxprTracer' at 0x7f74dc1b0cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a0630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106540>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b1fd0; to 'JaxprTracer' at 0x7f74dc1b1f80>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106d30>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1c11c0; to 'JaxprTracer' at 0x7f74dc1c1170>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c5ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:37,171 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:37,172 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:37,172 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:37,172 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:37,172 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1075e0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1d1b20; to 'JaxprTracer' at 0x7f74dc1d1b70>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d5570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1072a0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1d1300; to 'JaxprTracer' at 0x7f74dc1d1030>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d4870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107570>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d09a0; to 'JaxprTracer' at 0x7f74dc1d12b0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d5470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106230>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b0d10; to 'JaxprTracer' at 0x7f74dc1b0cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2a0630>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106540>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1b1fd0; to 'JaxprTracer' at 0x7f74dc1b1f80>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a9bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc106d30>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1c11c0; to 'JaxprTracer' at 0x7f74dc1c1170>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c5ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:37,184 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:37,184 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:37,184 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:37,184 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1075e0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1d1b20; to 'JaxprTracer' at 0x7f74dc1d1b70>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d5570>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1072a0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74dc1d1300; to 'JaxprTracer' at 0x7f74dc1d1030>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d4870>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107570>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d09a0; to 'JaxprTracer' at 0x7f74dc1d12b0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d5470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:37,185 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f92b0; to 'JaxprTracer' at 0x7f74dc2f96c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1852b0; to 'JaxprTracer' at 0x7f74dc1853a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:37,419 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:37,419 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:37,419 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:37,419 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107370>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2fb830; to 'JaxprTracer' at 0x7f74dc2fb970>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107650>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f19440; to 'JaxprTracer' at 0x7f74c7f1a0c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:37,419 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9555654 1.4893968]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9555654, 1.4893968]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1076d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1bce0; to 'JaxprTracer' at 0x7f74c7f1bc40>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1654f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.2726634  0.6715623]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.2726634,  0.6715623]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107510>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1c310; to 'JaxprTracer' at 0x7f74c7f1c270>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1df9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.07996871  0.4567322 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.07996871,  0.4567322 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107870>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1c8b0; to 'JaxprTracer' at 0x7f74c7f1c810>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1aeef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.4262046  -0.12220895]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.4262046 , -0.12220895]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1078c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1ce50; to 'JaxprTracer' at 0x7f74c7f1cdb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1dc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f92b0; to 'JaxprTracer' at 0x7f74dc2f96c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1852b0; to 'JaxprTracer' at 0x7f74dc1853a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:37,439 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:37,440 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:37,440 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:37,440 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bdb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc14b970; to 'JaxprTracer' at 0x7f74dc14a250>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc115bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bfb90>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc236b10; to 'JaxprTracer' at 0x7f74dc236bb0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15b030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057b0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2f92b0; to 'JaxprTracer' at 0x7f74dc2f96c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc498830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1057c0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1852b0; to 'JaxprTracer' at 0x7f74dc1853a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:37,440 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-9.80716720e-02  4.45445552e-02  8.60986263e-02 -7.48960488e-03
   8.97478312e-03 -1.69817373e-01  1.00406349e-01 -1.00332543e-01
   7.12870657e-02 -2.21936062e-01 -1.29444152e-01 -3.89000952e-01
  -1.65243998e-01  6.62800446e-02  1.83350742e-01 -9.63672847e-02
  -2.01711923e-01 -2.09589750e-02  1.11673556e-01  1.20168343e-01
   6.78391531e-02  1.64363086e-01 -4.16060537e-02  5.08584499e-01
  -3.90465647e-01  5.95526099e-02  8.96490142e-02 -9.41523761e-02
   2.32220247e-01  5.24550378e-02  3.06629315e-02  3.09917212e-01
  -1.50215939e-01  3.12860847e-01 -1.35204613e-01  4.47111949e-03
   3.32830474e-04 -1.79126859e-01  4.73625436e-02 -7.71797895e-02
   5.73820993e-02 -9.28010494e-02  2.12809414e-01 -5.60057983e-02
   7.92342722e-02 -2.34246790e-01  1.53864071e-01 -1.71387434e-01
   1.93845958e-01  1.17860898e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-9.80716720e-02,  4.45445552e-02,  8.60986263e-02,
        -7.48960488e-03,  8.97478312e-03, -1.69817373e-01,
         1.00406349e-01, -1.00332543e-01,  7.12870657e-02,
        -2.21936062e-01, -1.29444152e-01, -3.89000952e-01,
        -1.65243998e-01,  6.62800446e-02,  1.83350742e-01,
        -9.63672847e-02, -2.01711923e-01, -2.09589750e-02,
         1.11673556e-01,  1.20168343e-01,  6.78391531e-02,
         1.64363086e-01, -4.16060537e-02,  5.08584499e-01,
        -3.90465647e-01,  5.95526099e-02,  8.96490142e-02,
        -9.41523761e-02,  2.32220247e-01,  5.24550378e-02,
         3.06629315e-02,  3.09917212e-01, -1.50215939e-01,
         3.12860847e-01, -1.35204613e-01,  4.47111949e-03,
         3.32830474e-04, -1.79126859e-01,  4.73625436e-02,
        -7.71797895e-02,  5.73820993e-02, -9.28010494e-02,
         2.12809414e-01, -5.60057983e-02,  7.92342722e-02,
        -2.34246790e-01,  1.53864071e-01, -1.71387434e-01,
         1.93845958e-01,  1.17860898e-01]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107380>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b150; to 'JaxprTracer' at 0x7f74c7f1b240>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107470>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b6f0; to 'JaxprTracer' at 0x7f74c7f1b7e0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c9c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:37,468 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:37,468 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:37,468 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:37,468 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.03769319  0.3095465   0.          0.          0.89193225  1.522975
  -2.1501286   0.78189707 -0.05826281  0.45273668  0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.89193225,
         1.522975  , -2.1501286 ,  0.78189707, -0.05826281,  0.45273668,
         0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,12])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107680>, in_tracers=(Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f1dfd0; to 'JaxprTracer' at 0x7f74c7f1f420>], out_avals=[ShapedArray(float32[1,12])], primitive=concatenate, params={'dimension': 1}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f0f9f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:37,468 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-9.80716720e-02  4.45445552e-02  8.60986263e-02 -7.48960488e-03
   8.97478312e-03 -1.69817373e-01  1.00406349e-01 -1.00332543e-01
   7.12870657e-02 -2.21936062e-01 -1.29444152e-01 -3.89000952e-01
  -1.65243998e-01  6.62800446e-02  1.83350742e-01 -9.63672847e-02
  -2.01711923e-01 -2.09589750e-02  1.11673556e-01  1.20168343e-01
   6.78391531e-02  1.64363086e-01 -4.16060537e-02  5.08584499e-01
  -3.90465647e-01  5.95526099e-02  8.96490142e-02 -9.41523761e-02
   2.32220247e-01  5.24550378e-02  3.06629315e-02  3.09917212e-01
  -1.50215939e-01  3.12860847e-01 -1.35204613e-01  4.47111949e-03
   3.32830474e-04 -1.79126859e-01  4.73625436e-02 -7.71797895e-02
   5.73820993e-02 -9.28010494e-02  2.12809414e-01 -5.60057983e-02
   7.92342722e-02 -2.34246790e-01  1.53864071e-01 -1.71387434e-01
   1.93845958e-01  1.17860898e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-9.80716720e-02,  4.45445552e-02,  8.60986263e-02,
        -7.48960488e-03,  8.97478312e-03, -1.69817373e-01,
         1.00406349e-01, -1.00332543e-01,  7.12870657e-02,
        -2.21936062e-01, -1.29444152e-01, -3.89000952e-01,
        -1.65243998e-01,  6.62800446e-02,  1.83350742e-01,
        -9.63672847e-02, -2.01711923e-01, -2.09589750e-02,
         1.11673556e-01,  1.20168343e-01,  6.78391531e-02,
         1.64363086e-01, -4.16060537e-02,  5.08584499e-01,
        -3.90465647e-01,  5.95526099e-02,  8.96490142e-02,
        -9.41523761e-02,  2.32220247e-01,  5.24550378e-02,
         3.06629315e-02,  3.09917212e-01, -1.50215939e-01,
         3.12860847e-01, -1.35204613e-01,  4.47111949e-03,
         3.32830474e-04, -1.79126859e-01,  4.73625436e-02,
        -7.71797895e-02,  5.73820993e-02, -9.28010494e-02,
         2.12809414e-01, -5.60057983e-02,  7.92342722e-02,
        -2.34246790e-01,  1.53864071e-01, -1.71387434e-01,
         1.93845958e-01,  1.17860898e-01]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107380>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b150; to 'JaxprTracer' at 0x7f74c7f1b240>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:37,521 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:37,521 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:37,521 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:37,521 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.0442853   0.08665106  0.14122075  0.02633494  0.14971343 -0.17635396
  -0.00310724  0.02568609 -0.00886197 -0.2227422  -0.0820552  -0.41469306
  -0.13735743  0.14351447  0.21180847 -0.18201551 -0.2925831   0.02188981
   0.09600715  0.20924121  0.06138451  0.19595793  0.00683878  0.5496206
  -0.44841343  0.1582933   0.18140617 -0.08849707  0.17610097  0.08081252
  -0.02633412  0.34952453 -0.1474188   0.35841927 -0.05229886  0.05278115
  -0.02171042 -0.1384822   0.13617794 -0.04742929  0.08484331 -0.18490684
   0.20979878 -0.1528613  -0.01030461 -0.3072182   0.22956187 -0.27672216
   0.19617362  0.18462127]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.0442853 ,  0.08665106,  0.14122075,  0.02633494,  0.14971343,
        -0.17635396, -0.00310724,  0.02568609, -0.00886197, -0.2227422 ,
        -0.0820552 , -0.41469306, -0.13735743,  0.14351447,  0.21180847,
        -0.18201551, -0.2925831 ,  0.02188981,  0.09600715,  0.20924121,
         0.06138451,  0.19595793,  0.00683878,  0.5496206 , -0.44841343,
         0.1582933 ,  0.18140617, -0.08849707,  0.17610097,  0.08081252,
        -0.02633412,  0.34952453, -0.1474188 ,  0.35841927, -0.05229886,
         0.05278115, -0.02171042, -0.1384822 ,  0.13617794, -0.04742929,
         0.08484331, -0.18490684,  0.20979878, -0.1528613 , -0.01030461,
        -0.3072182 ,  0.22956187, -0.27672216,  0.19617362,  0.18462127]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107df0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f22890; to 'JaxprTracer' at 0x7f74c7f228e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1bcb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:37,521 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.0442853   0.08665106  0.14122075  0.02633494  0.14971343 -0.17635396
  -0.00310724  0.02568609 -0.00886197 -0.2227422  -0.0820552  -0.41469306
  -0.13735743  0.14351447  0.21180847 -0.18201551 -0.2925831   0.02188981
   0.09600715  0.20924121  0.06138451  0.19595793  0.00683878  0.5496206
  -0.44841343  0.1582933   0.18140617 -0.08849707  0.17610097  0.08081252
  -0.02633412  0.34952453 -0.1474188   0.35841927 -0.05229886  0.05278115
  -0.02171042 -0.1384822   0.13617794 -0.04742929  0.08484331 -0.18490684
   0.20979878 -0.1528613  -0.01030461 -0.3072182   0.22956187 -0.27672216
   0.19617362  0.18462127]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.0442853 ,  0.08665106,  0.14122075,  0.02633494,  0.14971343,
        -0.17635396, -0.00310724,  0.02568609, -0.00886197, -0.2227422 ,
        -0.0820552 , -0.41469306, -0.13735743,  0.14351447,  0.21180847,
        -0.18201551, -0.2925831 ,  0.02188981,  0.09600715,  0.20924121,
         0.06138451,  0.19595793,  0.00683878,  0.5496206 , -0.44841343,
         0.1582933 ,  0.18140617, -0.08849707,  0.17610097,  0.08081252,
        -0.02633412,  0.34952453, -0.1474188 ,  0.35841927, -0.05229886,
         0.05278115, -0.02171042, -0.1384822 ,  0.13617794, -0.04742929,
         0.08484331, -0.18490684,  0.20979878, -0.1528613 , -0.01030461,
        -0.3072182 ,  0.22956187, -0.27672216,  0.19617362,  0.18462127]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107df0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f22890; to 'JaxprTracer' at 0x7f74c7f228e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1bcb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:37,538 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:37,538 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:37,538 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:37,538 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.0442853   0.08665106  0.14122075  0.02633494  0.14971343 -0.17635396
  -0.00310724  0.02568609 -0.00886197 -0.2227422  -0.0820552  -0.41469306
  -0.13735743  0.14351447  0.21180847 -0.18201551 -0.2925831   0.02188981
   0.09600715  0.20924121  0.06138451  0.19595793  0.00683878  0.5496206
  -0.44841343  0.1582933   0.18140617 -0.08849707  0.17610097  0.08081252
  -0.02633412  0.34952453 -0.1474188   0.35841927 -0.05229886  0.05278115
  -0.02171042 -0.1384822   0.13617794 -0.04742929  0.08484331 -0.18490684
   0.20979878 -0.1528613  -0.01030461 -0.3072182   0.22956187 -0.27672216
   0.19617362  0.18462127]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.0442853 ,  0.08665106,  0.14122075,  0.02633494,  0.14971343,
        -0.17635396, -0.00310724,  0.02568609, -0.00886197, -0.2227422 ,
        -0.0820552 , -0.41469306, -0.13735743,  0.14351447,  0.21180847,
        -0.18201551, -0.2925831 ,  0.02188981,  0.09600715,  0.20924121,
         0.06138451,  0.19595793,  0.00683878,  0.5496206 , -0.44841343,
         0.1582933 ,  0.18140617, -0.08849707,  0.17610097,  0.08081252,
        -0.02633412,  0.34952453, -0.1474188 ,  0.35841927, -0.05229886,
         0.05278115, -0.02171042, -0.1384822 ,  0.13617794, -0.04742929,
         0.08484331, -0.18490684,  0.20979878, -0.1528613 , -0.01030461,
        -0.3072182 ,  0.22956187, -0.27672216,  0.19617362,  0.18462127]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107df0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f22890; to 'JaxprTracer' at 0x7f74c7f228e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1bcb30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:37,538 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4647594  0.4211623  0.5043541  0.4424008  0.47201797 0.519846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4647594 , 0.4211623 , 0.5043541 , 0.4424008 , 0.47201797,
        0.519846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107470>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b6f0; to 'JaxprTracer' at 0x7f74c7f1b7e0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c9c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:37,563 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:37,564 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:37,564 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:37,564 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107a60>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24908273 0.24477673 0.24976653 0.24563423 0.24902102 0.24933635]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f23330; to 'JaxprTracer' at 0x7f74c7f209f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0ff8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:37,564 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1052f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc194450; to 'JaxprTracer' at 0x7f74dc1d0ef0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1074a0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc184720; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1700b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1059f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186e80; to 'JaxprTracer' at 0x7f74dc186200>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc16b930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107420>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc134f90; to 'JaxprTracer' at 0x7f74dc137e70>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a14b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107370>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2fb830; to 'JaxprTracer' at 0x7f74dc2fb970>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107650>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f19440; to 'JaxprTracer' at 0x7f74c7f1a0c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:37,586 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:37,586 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:37,586 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:37,586 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:37,586 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1052f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc194450; to 'JaxprTracer' at 0x7f74dc1d0ef0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:37,655 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:37,655 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:37,655 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:37,655 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107a60>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24908273 0.24477673 0.24976653 0.24563423 0.24902102 0.24933635]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f23330; to 'JaxprTracer' at 0x7f74c7f209f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0ff8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:37,655 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107970>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f2ae30; to 'JaxprTracer' at 0x7f74c7f28130>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1074a0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc184720; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1700b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1059f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186e80; to 'JaxprTracer' at 0x7f74dc186200>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc16b930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107420>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc134f90; to 'JaxprTracer' at 0x7f74dc137e70>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a14b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:37,685 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:37,685 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:37,685 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:37,685 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107a60>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24908273 0.24477673 0.24976653 0.24563423 0.24902102 0.24933635]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f23330; to 'JaxprTracer' at 0x7f74c7f209f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0ff8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107970>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f2ae30; to 'JaxprTracer' at 0x7f74c7f28130>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:37,685 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.8278326  1.4949449  0.96509326 0.81924    0.8283828  1.395628  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.8278326 , 1.4949449 , 0.96509326, 0.81924   , 0.8283828 ,
        1.395628  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1074a0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc184720; to 'JaxprTracer' at 0x7f74dc6a8090>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1700b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.58746684  1.3190974   0.24434283 -0.3670878  -0.27922672  0.7741118 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.58746684,  1.3190974 ,  0.24434283, -0.3670878 , -0.27922672,
         0.7741118 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1059f0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186e80; to 'JaxprTracer' at 0x7f74dc186200>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc16b930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.01337358 0.39653152 0.13458984 0.01164594 0.01718473 0.5206737 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.01337358, 0.39653152, 0.13458984, 0.01164594, 0.01718473,
        0.5206737 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107420>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc134f90; to 'JaxprTracer' at 0x7f74dc137e70>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1a14b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:37,828 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:37,828 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:37,828 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:37,828 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c0e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f39cb0; to 'JaxprTracer' at 0x7f74c7f3a160>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c55b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c3e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f3bc90; to 'JaxprTracer' at 0x7f74c7f3bc40>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f368b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3cbd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f4ae80; to 'JaxprTracer' at 0x7f74c7f4ae30>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:37,828 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.7818861 -0.5007533]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.7818861, -0.5007533]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107970>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f2ae30; to 'JaxprTracer' at 0x7f74c7f28130>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
2023-12-05 15:22:37,848 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:37,848 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:37,848 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:37,848 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107a60>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24908273 0.24477673 0.24976653 0.24563423 0.24902102 0.24933635]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f23330; to 'JaxprTracer' at 0x7f74c7f209f0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0ff8f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:37,848 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958]
 [-0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958],
       [-0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3cb10>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f4b880; to 'JaxprTracer' at 0x7f74c7f4b7e0>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f51230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c0e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f39cb0; to 'JaxprTracer' at 0x7f74c7f3a160>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c55b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c3e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f3bc90; to 'JaxprTracer' at 0x7f74c7f3bc40>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f368b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3cbd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f4ae80; to 'JaxprTracer' at 0x7f74c7f4ae30>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:38,031 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,032 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:38,032 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:38,032 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:38,032 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d270>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f61f80; to 'JaxprTracer' at 0x7f74c7f618a0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d1f0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f62070; to 'JaxprTracer' at 0x7f74c7f62980>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f6f330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d390>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f62d90; to 'JaxprTracer' at 0x7f74c7f625c0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f6d330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c0e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f39cb0; to 'JaxprTracer' at 0x7f74c7f3a160>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c55b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3c3e0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f3bc90; to 'JaxprTracer' at 0x7f74c7f3bc40>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f368b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3cbd0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f4ae80; to 'JaxprTracer' at 0x7f74c7f4ae30>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52770>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:38,042 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,042 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:38,043 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:38,043 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d270>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f61f80; to 'JaxprTracer' at 0x7f74c7f618a0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d1f0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f62070; to 'JaxprTracer' at 0x7f74c7f62980>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f6f330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d390>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f62d90; to 'JaxprTracer' at 0x7f74c7f625c0>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f6d330>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:38,043 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107370>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2fb830; to 'JaxprTracer' at 0x7f74dc2fb970>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107650>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f19440; to 'JaxprTracer' at 0x7f74c7f1a0c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:38,271 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:38,271 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:38,271 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:38,271 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d3f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1848b0; to 'JaxprTracer' at 0x7f74dc186890>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d0e0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187010; to 'JaxprTracer' at 0x7f74dc185f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2845f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:38,271 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.89193225 1.522975  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.89193225, 1.522975  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d250>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8ebb0; to 'JaxprTracer' at 0x7f74c7f8eca0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f40830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1501286   0.78189707]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1501286 ,  0.78189707]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d180>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8f100; to 'JaxprTracer' at 0x7f74c7f8f1f0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.05826281  0.45273668]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.05826281,  0.45273668]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d5d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8f6f0; to 'JaxprTracer' at 0x7f74c7f8f650>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d36b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.788036   -0.15195438]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.788036  , -0.15195438]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d1a0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8fc90; to 'JaxprTracer' at 0x7f74c7f8fbf0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f709f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107370>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2fb830; to 'JaxprTracer' at 0x7f74dc2fb970>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107650>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f19440; to 'JaxprTracer' at 0x7f74c7f1a0c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:38,294 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:38,295 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:38,295 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:38,295 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bf820>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1905e0; to 'JaxprTracer' at 0x7f74dc2bc590>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc271c30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6be0d0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d1120; to 'JaxprTracer' at 0x7f74dc1d0db0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d58b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107370>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2fb830; to 'JaxprTracer' at 0x7f74dc2fb970>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc4968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107650>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f19440; to 'JaxprTracer' at 0x7f74c7f1a0c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:38,295 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.0442853   0.08665106  0.14122075  0.02633494  0.14971343 -0.17635396
  -0.00310724  0.02568609 -0.00886197 -0.2227422  -0.0820552  -0.41469306
  -0.13735743  0.14351447  0.21180847 -0.18201551 -0.2925831   0.02188981
   0.09600715  0.20924121  0.06138451  0.19595793  0.00683878  0.5496206
  -0.44841343  0.1582933   0.18140617 -0.08849707  0.17610097  0.08081252
  -0.02633412  0.34952453 -0.1474188   0.35841927 -0.05229886  0.05278115
  -0.02171042 -0.1384822   0.13617794 -0.04742929  0.08484331 -0.18490684
   0.20979878 -0.1528613  -0.01030461 -0.3072182   0.22956187 -0.27672216
   0.19617362  0.18462127]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.0442853 ,  0.08665106,  0.14122075,  0.02633494,  0.14971343,
        -0.17635396, -0.00310724,  0.02568609, -0.00886197, -0.2227422 ,
        -0.0820552 , -0.41469306, -0.13735743,  0.14351447,  0.21180847,
        -0.18201551, -0.2925831 ,  0.02188981,  0.09600715,  0.20924121,
         0.06138451,  0.19595793,  0.00683878,  0.5496206 , -0.44841343,
         0.1582933 ,  0.18140617, -0.08849707,  0.17610097,  0.08081252,
        -0.02633412,  0.34952453, -0.1474188 ,  0.35841927, -0.05229886,
         0.05278115, -0.02171042, -0.1384822 ,  0.13617794, -0.04742929,
         0.08484331, -0.18490684,  0.20979878, -0.1528613 , -0.01030461,
        -0.3072182 ,  0.22956187, -0.27672216,  0.19617362,  0.18462127]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d4b0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187600; to 'JaxprTracer' at 0x7f74dc185670>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f34430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d240>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8e430; to 'JaxprTracer' at 0x7f74c7f8e610>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2930f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:38,321 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:38,321 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:38,322 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:38,322 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.03769319  0.3095465   0.          0.          0.7844258   1.5620698
  -3.1675062   0.5083716  -0.01873292  0.44752312  1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.7844258 ,
         1.5620698 , -3.1675062 ,  0.5083716 , -0.01873292,  0.44752312,
         1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,12])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d380>, in_tracers=(Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f98540; to 'JaxprTracer' at 0x7f74c7f98900>], out_avals=[ShapedArray(float32[1,12])], primitive=concatenate, params={'dimension': 1}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f96f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:38,322 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.0442853   0.08665106  0.14122075  0.02633494  0.14971343 -0.17635396
  -0.00310724  0.02568609 -0.00886197 -0.2227422  -0.0820552  -0.41469306
  -0.13735743  0.14351447  0.21180847 -0.18201551 -0.2925831   0.02188981
   0.09600715  0.20924121  0.06138451  0.19595793  0.00683878  0.5496206
  -0.44841343  0.1582933   0.18140617 -0.08849707  0.17610097  0.08081252
  -0.02633412  0.34952453 -0.1474188   0.35841927 -0.05229886  0.05278115
  -0.02171042 -0.1384822   0.13617794 -0.04742929  0.08484331 -0.18490684
   0.20979878 -0.1528613  -0.01030461 -0.3072182   0.22956187 -0.27672216
   0.19617362  0.18462127]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.0442853 ,  0.08665106,  0.14122075,  0.02633494,  0.14971343,
        -0.17635396, -0.00310724,  0.02568609, -0.00886197, -0.2227422 ,
        -0.0820552 , -0.41469306, -0.13735743,  0.14351447,  0.21180847,
        -0.18201551, -0.2925831 ,  0.02188981,  0.09600715,  0.20924121,
         0.06138451,  0.19595793,  0.00683878,  0.5496206 , -0.44841343,
         0.1582933 ,  0.18140617, -0.08849707,  0.17610097,  0.08081252,
        -0.02633412,  0.34952453, -0.1474188 ,  0.35841927, -0.05229886,
         0.05278115, -0.02171042, -0.1384822 ,  0.13617794, -0.04742929,
         0.08484331, -0.18490684,  0.20979878, -0.1528613 , -0.01030461,
        -0.3072182 ,  0.22956187, -0.27672216,  0.19617362,  0.18462127]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d4b0>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187600; to 'JaxprTracer' at 0x7f74dc185670>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f34430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:38,375 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:38,375 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:38,375 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:38,376 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.02519726  0.1567966   0.1825991   0.07926197  0.31500894 -0.19909
  -0.15716332  0.17676657 -0.09137429 -0.22472417 -0.0027129  -0.41256163
  -0.07373275  0.24723524  0.22145243 -0.27525252 -0.41382295  0.07476535
   0.08548348  0.29777104  0.05498987  0.25644934  0.06136499  0.5544862
  -0.49831083  0.27334923  0.28902566 -0.09486882  0.08303132  0.09246119
  -0.10563185  0.3587253  -0.15249357  0.39515632  0.03804909  0.09623224
  -0.07189816 -0.08573322  0.22200885  0.03031938  0.11838482 -0.2853166
   0.22719447 -0.27483362 -0.10243688 -0.3596908   0.3048125  -0.40933144
   0.21438596  0.27450597]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.02519726,  0.1567966 ,  0.1825991 ,  0.07926197,  0.31500894,
        -0.19909   , -0.15716332,  0.17676657, -0.09137429, -0.22472417,
        -0.0027129 , -0.41256163, -0.07373275,  0.24723524,  0.22145243,
        -0.27525252, -0.41382295,  0.07476535,  0.08548348,  0.29777104,
         0.05498987,  0.25644934,  0.06136499,  0.5544862 , -0.49831083,
         0.27334923,  0.28902566, -0.09486882,  0.08303132,  0.09246119,
        -0.10563185,  0.3587253 , -0.15249357,  0.39515632,  0.03804909,
         0.09623224, -0.07189816, -0.08573322,  0.22200885,  0.03031938,
         0.11838482, -0.2853166 ,  0.22719447, -0.27483362, -0.10243688,
        -0.3596908 ,  0.3048125 , -0.40933144,  0.21438596,  0.27450597]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3dbd0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1490; to 'JaxprTracer' at 0x7f74c7fa14e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:38,376 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.02519726  0.1567966   0.1825991   0.07926197  0.31500894 -0.19909
  -0.15716332  0.17676657 -0.09137429 -0.22472417 -0.0027129  -0.41256163
  -0.07373275  0.24723524  0.22145243 -0.27525252 -0.41382295  0.07476535
   0.08548348  0.29777104  0.05498987  0.25644934  0.06136499  0.5544862
  -0.49831083  0.27334923  0.28902566 -0.09486882  0.08303132  0.09246119
  -0.10563185  0.3587253  -0.15249357  0.39515632  0.03804909  0.09623224
  -0.07189816 -0.08573322  0.22200885  0.03031938  0.11838482 -0.2853166
   0.22719447 -0.27483362 -0.10243688 -0.3596908   0.3048125  -0.40933144
   0.21438596  0.27450597]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.02519726,  0.1567966 ,  0.1825991 ,  0.07926197,  0.31500894,
        -0.19909   , -0.15716332,  0.17676657, -0.09137429, -0.22472417,
        -0.0027129 , -0.41256163, -0.07373275,  0.24723524,  0.22145243,
        -0.27525252, -0.41382295,  0.07476535,  0.08548348,  0.29777104,
         0.05498987,  0.25644934,  0.06136499,  0.5544862 , -0.49831083,
         0.27334923,  0.28902566, -0.09486882,  0.08303132,  0.09246119,
        -0.10563185,  0.3587253 , -0.15249357,  0.39515632,  0.03804909,
         0.09623224, -0.07189816, -0.08573322,  0.22200885,  0.03031938,
         0.11838482, -0.2853166 ,  0.22719447, -0.27483362, -0.10243688,
        -0.3596908 ,  0.3048125 , -0.40933144,  0.21438596,  0.27450597]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3dbd0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1490; to 'JaxprTracer' at 0x7f74c7fa14e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:38,393 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:38,393 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:38,393 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:38,393 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.02519726  0.1567966   0.1825991   0.07926197  0.31500894 -0.19909
  -0.15716332  0.17676657 -0.09137429 -0.22472417 -0.0027129  -0.41256163
  -0.07373275  0.24723524  0.22145243 -0.27525252 -0.41382295  0.07476535
   0.08548348  0.29777104  0.05498987  0.25644934  0.06136499  0.5544862
  -0.49831083  0.27334923  0.28902566 -0.09486882  0.08303132  0.09246119
  -0.10563185  0.3587253  -0.15249357  0.39515632  0.03804909  0.09623224
  -0.07189816 -0.08573322  0.22200885  0.03031938  0.11838482 -0.2853166
   0.22719447 -0.27483362 -0.10243688 -0.3596908   0.3048125  -0.40933144
   0.21438596  0.27450597]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.02519726,  0.1567966 ,  0.1825991 ,  0.07926197,  0.31500894,
        -0.19909   , -0.15716332,  0.17676657, -0.09137429, -0.22472417,
        -0.0027129 , -0.41256163, -0.07373275,  0.24723524,  0.22145243,
        -0.27525252, -0.41382295,  0.07476535,  0.08548348,  0.29777104,
         0.05498987,  0.25644934,  0.06136499,  0.5544862 , -0.49831083,
         0.27334923,  0.28902566, -0.09486882,  0.08303132,  0.09246119,
        -0.10563185,  0.3587253 , -0.15249357,  0.39515632,  0.03804909,
         0.09623224, -0.07189816, -0.08573322,  0.22200885,  0.03031938,
         0.11838482, -0.2853166 ,  0.22719447, -0.27483362, -0.10243688,
        -0.3596908 ,  0.3048125 , -0.40933144,  0.21438596,  0.27450597]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3dbd0>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1490; to 'JaxprTracer' at 0x7f74c7fa14e0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52eb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:38,393 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4697135  0.42772776 0.51527977 0.43392605 0.46871158 0.52576137]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4697135 , 0.42772776, 0.51527977, 0.43392605, 0.46871158,
        0.52576137]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d240>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f8e430; to 'JaxprTracer' at 0x7f74c7f8e610>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2930f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:38,419 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:38,419 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:38,419 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:38,419 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d840>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2494505  0.24646474 0.24924679 0.244675   0.24877657 0.24896686]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f9a840; to 'JaxprTracer' at 0x7f74c7f98e50>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0fc270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:38,419 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1055a0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f63830; to 'JaxprTracer' at 0x7f74c7f627a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107f70>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f61d50; to 'JaxprTracer' at 0x7f74c7f626b0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f012f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107300>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1a2f0; to 'JaxprTracer' at 0x7f74c7f1a980>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7effcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107ed0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235080; to 'JaxprTracer' at 0x7f74dc237d30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f375f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d3f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1848b0; to 'JaxprTracer' at 0x7f74dc186890>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d0e0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187010; to 'JaxprTracer' at 0x7f74dc185f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2845f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:38,446 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,446 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:38,446 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:38,446 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:38,446 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1055a0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f63830; to 'JaxprTracer' at 0x7f74c7f627a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc15d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:38,517 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,517 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:38,517 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:38,517 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d840>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2494505  0.24646474 0.24924679 0.244675   0.24877657 0.24896686]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f9a840; to 'JaxprTracer' at 0x7f74c7f98e50>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0fc270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:38,517 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d820>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1e90; to 'JaxprTracer' at 0x7f74c7f9b600>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107f70>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f61d50; to 'JaxprTracer' at 0x7f74c7f626b0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f012f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107300>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1a2f0; to 'JaxprTracer' at 0x7f74c7f1a980>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7effcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107ed0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235080; to 'JaxprTracer' at 0x7f74dc237d30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f375f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:38,542 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:38,542 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:38,543 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:38,543 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d840>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2494505  0.24646474 0.24924679 0.244675   0.24877657 0.24896686]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f9a840; to 'JaxprTracer' at 0x7f74c7f98e50>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0fc270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d820>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1e90; to 'JaxprTracer' at 0x7f74c7f9b600>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:38,543 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.85720587 1.42899    0.9528761  0.8375943  0.8423441  1.3569224 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.85720587, 1.42899   , 0.9528761 , 0.8375943 , 0.8423441 ,
        1.3569224 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107f70>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f61d50; to 'JaxprTracer' at 0x7f74c7f626b0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f012f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.8654389   1.9432554   0.15886612 -0.23867211 -0.6276498   1.3793205 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.8654389 ,  1.9432554 ,  0.15886612, -0.23867211, -0.6276498 ,
         1.3793205 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107300>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1a2f0; to 'JaxprTracer' at 0x7f74c7f1a980>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7effcf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.0175945  0.51026934 0.12200513 0.01583187 0.016481   0.61608386]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.0175945 , 0.51026934, 0.12200513, 0.01583187, 0.016481  ,
        0.61608386]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107ed0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc235080; to 'JaxprTracer' at 0x7f74dc237d30>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f375f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:38,679 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:38,679 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:38,679 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:38,679 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3de80>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f394e0; to 'JaxprTracer' at 0x7f74c7fb4180>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fae470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e190>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fb6b60; to 'JaxprTracer' at 0x7f74c7fb6b10>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f011b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e980>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fc5e40; to 'JaxprTracer' at 0x7f74c7fc5df0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fc9970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:38,679 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1927958 -0.6788173]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1927958, -0.6788173]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d820>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa1e90; to 'JaxprTracer' at 0x7f74c7f9b600>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc13a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
2023-12-05 15:22:38,699 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,700 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:38,700 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:38,700 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d840>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.2494505  0.24646474 0.24924679 0.244675   0.24877657 0.24896686]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f9a840; to 'JaxprTracer' at 0x7f74c7f98e50>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc0fc270>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:38,700 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248]
 [-0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248],
       [-0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e230>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fc7ce0; to 'JaxprTracer' at 0x7f74c7fc79c0>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fd0130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3de80>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f394e0; to 'JaxprTracer' at 0x7f74c7fb4180>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fae470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e190>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fb6b60; to 'JaxprTracer' at 0x7f74c7fb6b10>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f011b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e980>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fc5e40; to 'JaxprTracer' at 0x7f74c7fc5df0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fc9970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:38,890 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,890 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:38,890 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:38,890 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:38,890 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f230>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fdcf40; to 'JaxprTracer' at 0x7f74c7fdcd10>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fab530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3eef0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fdcc20; to 'JaxprTracer' at 0x7f74c7fdcfe0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74ddc42d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f1c0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde200; to 'JaxprTracer' at 0x7f74c7fddd00>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe6fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3de80>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7f394e0; to 'JaxprTracer' at 0x7f74c7fb4180>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fae470>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e190>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fb6b60; to 'JaxprTracer' at 0x7f74c7fb6b10>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f011b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3e980>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fc5e40; to 'JaxprTracer' at 0x7f74c7fc5df0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fc9970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:38,901 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:38,901 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:38,901 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:38,901 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f230>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fdcf40; to 'JaxprTracer' at 0x7f74c7fdcd10>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fab530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3eef0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fdcc20; to 'JaxprTracer' at 0x7f74c7fdcfe0>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74ddc42d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f1c0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde200; to 'JaxprTracer' at 0x7f74c7fddd00>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe6fb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:38,901 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d3f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1848b0; to 'JaxprTracer' at 0x7f74dc186890>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d0e0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187010; to 'JaxprTracer' at 0x7f74dc185f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2845f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:39,144 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:39,144 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:39,145 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:39,145 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14306724 0.4225216 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14306724, 0.4225216 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186750; to 'JaxprTracer' at 0x7f74dc184900>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f96e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 2.7132246  -0.70774716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 2.7132246 , -0.70774716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed80>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2a6d90; to 'JaxprTracer' at 0x7f74c7fc70b0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:39,145 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.7844258 1.5620698]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.7844258, 1.5620698]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f000>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471db20; to 'JaxprTracer' at 0x7f74c471dc10>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4708d70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-3.1675062  0.5083716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-3.1675062,  0.5083716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ee20>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471e070; to 'JaxprTracer' at 0x7f74c471e160>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c470bef0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-0.01873292  0.44752312]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-0.01873292,  0.44752312]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f380>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471e660; to 'JaxprTracer' at 0x7f74c471e5c0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.296555   -0.18271744]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.296555  , -0.18271744]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ef50>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471ec00; to 'JaxprTracer' at 0x7f74c471eb60>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f703b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d3f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1848b0; to 'JaxprTracer' at 0x7f74dc186890>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d0e0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187010; to 'JaxprTracer' at 0x7f74dc185f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2845f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:39,164 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:39,164 [DEBUG] feedbax.model,114: Stage: nn_step
2023-12-05 15:22:39,164 [DEBUG] feedbax.model,115: Stage module:
RNNCell(
  out_size=6,
  cell=GRUCell(
    weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
    weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
    bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
    bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
    input_size=12,
    hidden_size=50,
    use_bias=True
  ),
  noise_std=None,
  hidden_size=50,
  intervenors={'cell': [], 'cell_noise': [], 'readout': []},
  encoder=None,
  encoding_size=None,
  readout=Linear(
    weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
    bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
    in_features=50,
    out_features=6,
    use_bias=True
  ),
  out_nonlinearity=<wrapped function sigmoid>
)
2023-12-05 15:22:39,164 [DEBUG] feedbax.model,116: Input:
(
  CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0.03769319, 0.3095465 ]], dtype=float32)
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Array([[0., 0.]], dtype=float32)
  batch_dim = 0,
    force=None
  ),
  (
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc6bffc0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1d1c0; to 'JaxprTracer' at 0x7f74c7f1c630>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc12d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105460>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc149f80; to 'JaxprTracer' at 0x7f74dc4176a0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1ca730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d3f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1848b0; to 'JaxprTracer' at 0x7f74dc186890>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1d6670>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d0e0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc187010; to 'JaxprTracer' at 0x7f74dc185f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2845f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:39,164 [DEBUG] feedbax.model,117: Substate:
NetworkState(
  activity=Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.02519726  0.1567966   0.1825991   0.07926197  0.31500894 -0.19909
  -0.15716332  0.17676657 -0.09137429 -0.22472417 -0.0027129  -0.41256163
  -0.07373275  0.24723524  0.22145243 -0.27525252 -0.41382295  0.07476535
   0.08548348  0.29777104  0.05498987  0.25644934  0.06136499  0.5544862
  -0.49831083  0.27334923  0.28902566 -0.09486882  0.08303132  0.09246119
  -0.10563185  0.3587253  -0.15249357  0.39515632  0.03804909  0.09623224
  -0.07189816 -0.08573322  0.22200885  0.03031938  0.11838482 -0.2853166
   0.22719447 -0.27483362 -0.10243688 -0.3596908   0.3048125  -0.40933144
   0.21438596  0.27450597]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.02519726,  0.1567966 ,  0.1825991 ,  0.07926197,  0.31500894,
        -0.19909   , -0.15716332,  0.17676657, -0.09137429, -0.22472417,
        -0.0027129 , -0.41256163, -0.07373275,  0.24723524,  0.22145243,
        -0.27525252, -0.41382295,  0.07476535,  0.08548348,  0.29777104,
         0.05498987,  0.25644934,  0.06136499,  0.5544862 , -0.49831083,
         0.27334923,  0.28902566, -0.09486882,  0.08303132,  0.09246119,
        -0.10563185,  0.3587253 , -0.15249357,  0.39515632,  0.03804909,
         0.09623224, -0.07189816, -0.08573322,  0.22200885,  0.03031938,
         0.11838482, -0.2853166 ,  0.22719447, -0.27483362, -0.10243688,
        -0.3596908 ,  0.3048125 , -0.40933144,  0.21438596,  0.27450597]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f260>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc28fdd0; to 'JaxprTracer' at 0x7f74dc20fba0>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f812b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  output=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3eff0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471d260; to 'JaxprTracer' at 0x7f74dc17b510>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  encoding=None
)
2023-12-05 15:22:39,189 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:39,189 [DEBUG] feedbax.model,114: Stage: cell
2023-12-05 15:22:39,189 [DEBUG] feedbax.model,115: Stage module:
GRUCell(
  weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
  weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
  bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
  bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
  input_size=12,
  hidden_size=50,
  use_bias=True
)
2023-12-05 15:22:39,189 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[12])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.03769319  0.3095465   0.          0.          0.6260505   1.5874884
  -4.2893033  -0.34320694  0.04530472  0.43993482  1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.03769319,  0.3095465 ,  0.        ,  0.        ,  0.6260505 ,
         1.5874884 , -4.2893033 , -0.34320694,  0.04530472,  0.43993482,
         1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,12])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,12]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f130>, in_tracers=(Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0. 0.]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4734130; to 'JaxprTracer' at 0x7f74c47340e0>], out_avals=[ShapedArray(float32[1,12])], primitive=concatenate, params={'dimension': 1}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4717130>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:39,190 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.02519726  0.1567966   0.1825991   0.07926197  0.31500894 -0.19909
  -0.15716332  0.17676657 -0.09137429 -0.22472417 -0.0027129  -0.41256163
  -0.07373275  0.24723524  0.22145243 -0.27525252 -0.41382295  0.07476535
   0.08548348  0.29777104  0.05498987  0.25644934  0.06136499  0.5544862
  -0.49831083  0.27334923  0.28902566 -0.09486882  0.08303132  0.09246119
  -0.10563185  0.3587253  -0.15249357  0.39515632  0.03804909  0.09623224
  -0.07189816 -0.08573322  0.22200885  0.03031938  0.11838482 -0.2853166
   0.22719447 -0.27483362 -0.10243688 -0.3596908   0.3048125  -0.40933144
   0.21438596  0.27450597]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.02519726,  0.1567966 ,  0.1825991 ,  0.07926197,  0.31500894,
        -0.19909   , -0.15716332,  0.17676657, -0.09137429, -0.22472417,
        -0.0027129 , -0.41256163, -0.07373275,  0.24723524,  0.22145243,
        -0.27525252, -0.41382295,  0.07476535,  0.08548348,  0.29777104,
         0.05498987,  0.25644934,  0.06136499,  0.5544862 , -0.49831083,
         0.27334923,  0.28902566, -0.09486882,  0.08303132,  0.09246119,
        -0.10563185,  0.3587253 , -0.15249357,  0.39515632,  0.03804909,
         0.09623224, -0.07189816, -0.08573322,  0.22200885,  0.03031938,
         0.11838482, -0.2853166 ,  0.22719447, -0.27483362, -0.10243688,
        -0.3596908 ,  0.3048125 , -0.40933144,  0.21438596,  0.27450597]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f260>, in_tracers=(Traced<ShapedArray(float32[1,1,50]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc28fdd0; to 'JaxprTracer' at 0x7f74dc20fba0>], out_avals=[ShapedArray(float32[1,50])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f812b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:39,242 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:39,242 [DEBUG] feedbax.model,114: Stage: cell_noise
2023-12-05 15:22:39,242 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _add_state_noise>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:39,242 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.10960981  0.24662255  0.19499816  0.15796539  0.48318124 -0.25951338
  -0.3607026   0.33414623 -0.15902527 -0.24026328  0.11147537 -0.37188104
   0.0439376   0.38270283  0.19711056 -0.36913493 -0.54701114  0.14024198
   0.08910619  0.37771374  0.05783462  0.3527761   0.11680625  0.49477524
  -0.53925     0.39478204  0.39861393 -0.12259652 -0.04933433  0.07472087
  -0.20563534  0.3260364  -0.17011756  0.4135096   0.13043502  0.11877499
  -0.16601723 -0.03300707  0.29231173  0.16675751  0.16106553 -0.38269153
   0.28772092 -0.40490735 -0.17219472 -0.37619528  0.36429116 -0.55946434
   0.27725872  0.39388752]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.10960981,  0.24662255,  0.19499816,  0.15796539,  0.48318124,
        -0.25951338, -0.3607026 ,  0.33414623, -0.15902527, -0.24026328,
         0.11147537, -0.37188104,  0.0439376 ,  0.38270283,  0.19711056,
        -0.36913493, -0.54701114,  0.14024198,  0.08910619,  0.37771374,
         0.05783462,  0.3527761 ,  0.11680625,  0.49477524, -0.53925   ,
         0.39478204,  0.39861393, -0.12259652, -0.04933433,  0.07472087,
        -0.20563534,  0.3260364 , -0.17011756,  0.4135096 ,  0.13043502,
         0.11877499, -0.16601723, -0.03300707,  0.29231173,  0.16675751,
         0.16106553, -0.38269153,  0.28772092, -0.40490735, -0.17219472,
        -0.37619528,  0.36429116, -0.55946434,  0.27725872,  0.39388752]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f980>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4728360; to 'JaxprTracer' at 0x7f74c47283b0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c9030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:39,242 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.10960981  0.24662255  0.19499816  0.15796539  0.48318124 -0.25951338
  -0.3607026   0.33414623 -0.15902527 -0.24026328  0.11147537 -0.37188104
   0.0439376   0.38270283  0.19711056 -0.36913493 -0.54701114  0.14024198
   0.08910619  0.37771374  0.05783462  0.3527761   0.11680625  0.49477524
  -0.53925     0.39478204  0.39861393 -0.12259652 -0.04933433  0.07472087
  -0.20563534  0.3260364  -0.17011756  0.4135096   0.13043502  0.11877499
  -0.16601723 -0.03300707  0.29231173  0.16675751  0.16106553 -0.38269153
   0.28772092 -0.40490735 -0.17219472 -0.37619528  0.36429116 -0.55946434
   0.27725872  0.39388752]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.10960981,  0.24662255,  0.19499816,  0.15796539,  0.48318124,
        -0.25951338, -0.3607026 ,  0.33414623, -0.15902527, -0.24026328,
         0.11147537, -0.37188104,  0.0439376 ,  0.38270283,  0.19711056,
        -0.36913493, -0.54701114,  0.14024198,  0.08910619,  0.37771374,
         0.05783462,  0.3527761 ,  0.11680625,  0.49477524, -0.53925   ,
         0.39478204,  0.39861393, -0.12259652, -0.04933433,  0.07472087,
        -0.20563534,  0.3260364 , -0.17011756,  0.4135096 ,  0.13043502,
         0.11877499, -0.16601723, -0.03300707,  0.29231173,  0.16675751,
         0.16106553, -0.38269153,  0.28772092, -0.40490735, -0.17219472,
        -0.37619528,  0.36429116, -0.55946434,  0.27725872,  0.39388752]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f980>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4728360; to 'JaxprTracer' at 0x7f74c47283b0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c9030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:39,258 [DEBUG] feedbax.model,113: Module: RNNCell
2023-12-05 15:22:39,259 [DEBUG] feedbax.model,114: Stage: readout
2023-12-05 15:22:39,259 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _output>,
  __self__=RNNCell(
    out_size=6,
    cell=GRUCell(
      weight_ih=Traced<ConcreteArray([[-8.46662819e-02  1.23299792e-01 -1.12071633e-04 ...  5.60661405e-02
  -4.71715629e-02  8.88422877e-02]
 [ 3.37000489e-02 -1.24266952e-01  1.18310943e-01 ...  4.53013182e-02
   1.39213249e-01 -1.18594155e-01]
 [-8.77272859e-02  1.10744044e-01  1.32000342e-01 ...  4.08365875e-02
   7.88374394e-02 -2.47615799e-02]
 ...
 [ 2.94340402e-02 -2.21252441e-04  1.40999332e-01 ... -1.21189967e-01
  -1.08281434e-01 -8.90024006e-03]
 [-1.34572536e-02  1.15675673e-01  1.40430734e-01 ... -4.30030748e-02
  -4.65646163e-02 -1.76050738e-02]
 [-6.89357519e-04  1.15568057e-01  8.05091560e-02 ...  6.52781874e-02
   6.35483116e-02 -1.40231103e-01]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[-8.46662819e-02,  1.23299792e-01, -1.12071633e-04, ...,
         5.60661405e-02, -4.71715629e-02,  8.88422877e-02],
       [ 3.37000489e-02, -1.24266952e-01,  1.18310943e-01, ...,
         4.53013182e-02,  1.39213249e-01, -1.18594155e-01],
       [-8.77272859e-02,  1.10744044e-01,  1.32000342e-01, ...,
         4.08365875e-02,  7.88374394e-02, -2.47615799e-02],
       ...,
       [ 2.94340402e-02, -2.21252441e-04,  1.40999332e-01, ...,
        -1.21189967e-01, -1.08281434e-01, -8.90024006e-03],
       [-1.34572536e-02,  1.15675673e-01,  1.40430734e-01, ...,
        -4.30030748e-02, -4.65646163e-02, -1.76050738e-02],
       [-6.89357519e-04,  1.15568057e-01,  8.05091560e-02, ...,
         6.52781874e-02,  6.35483116e-02, -1.40231103e-01]],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150,12])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,12]), None)
    recipe = LambdaBinding(),
      weight_hh=Traced<ConcreteArray([[ 0.12623869  0.1104228   0.03501645 ... -0.09038395 -0.07943606
  -0.03553863]
 [-0.06710284 -0.06884624  0.09372893 ... -0.11714131 -0.11375549
  -0.07852387]
 [ 0.08694077  0.01900482  0.0098927  ... -0.06815911 -0.09862383
   0.01092362]
 ...
 [-0.06579545 -0.08621074 -0.1253033  ... -0.11440136 -0.07452659
   0.01591799]
 [-0.12191887 -0.11571236 -0.07942861 ...  0.05847673 -0.04087608
   0.01462813]
 [ 0.07379954 -0.1256398  -0.05526325 ... -0.1356813  -0.09073084
   0.01629438]], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([[ 0.12623869,  0.1104228 ,  0.03501645, ..., -0.09038395,
        -0.07943606, -0.03553863],
       [-0.06710284, -0.06884624,  0.09372893, ..., -0.11714131,
        -0.11375549, -0.07852387],
       [ 0.08694077,  0.01900482,  0.0098927 , ..., -0.06815911,
        -0.09862383,  0.01092362],
       ...,
       [-0.06579545, -0.08621074, -0.1253033 , ..., -0.11440136,
        -0.07452659,  0.01591799],
       [-0.12191887, -0.11571236, -0.07942861, ...,  0.05847673,
        -0.04087608,  0.01462813],
       [ 0.07379954, -0.1256398 , -0.05526325, ..., -0.1356813 ,
        -0.09073084,  0.01629438]], dtype=float32)
  tangent = Traced<ShapedArray(float32[150,50])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150,50]), None)
    recipe = LambdaBinding(),
      bias=Traced<ConcreteArray([ 0.10775851  0.04918392  0.01585463  0.00516143 -0.04751123 -0.11575346
 -0.03134411 -0.07147755  0.0738516   0.05023827 -0.03865442 -0.00582975
 -0.1220386  -0.13444528 -0.08170804  0.08175096  0.00787458  0.06062046
  0.09004661  0.09654981 -0.0662475  -0.08358102 -0.11122112 -0.05428082
 -0.06554702  0.09682679 -0.12541038 -0.03378771  0.02200535 -0.07350967
  0.02770312 -0.00695753 -0.01645336 -0.05649718 -0.04959764 -0.11056943
 -0.12115514 -0.05989654  0.14061187  0.06624241 -0.06583318 -0.005252
 -0.11836478  0.11246587  0.0271713   0.11750431  0.07850417 -0.06040584
  0.09184039  0.10362697  0.01180503 -0.027098   -0.08464443 -0.02608421
 -0.05656923 -0.02142112 -0.12639135  0.02386263 -0.11191567  0.04467823
 -0.13220203 -0.03854299 -0.04984348 -0.01699867  0.14137791  0.08743852
 -0.06544003  0.08472764 -0.10589565  0.02012213 -0.11833935  0.06560114
  0.09370162 -0.07737724  0.12821521 -0.01117906  0.04584336  0.07000545
  0.01603958  0.11899309 -0.14027622  0.07592981 -0.10511599  0.05738479
 -0.08048363  0.1112176  -0.01404579  0.13629352 -0.03966052  0.00368229
  0.13149391  0.0613237   0.03257988  0.04302469  0.07787214 -0.10808917
  0.03874327 -0.03916758  0.13408522  0.12868129 -0.11744759  0.03493647
  0.1018627   0.08607112 -0.08873217  0.05223043  0.11900814 -0.08163224
  0.11642231 -0.13964559  0.00903511 -0.1114857  -0.09049829  0.1086093
  0.07869306 -0.0801034  -0.04514933 -0.08470508 -0.02529006  0.04486167
  0.09817502  0.03489031  0.07399088  0.12748508 -0.09509786  0.0055626
 -0.01833148 -0.10129163  0.09001268 -0.01657063 -0.01100522 -0.08580286
 -0.10233583  0.0921489  -0.02760467 -0.05364306  0.05732238 -0.114976
  0.01357344 -0.11178491  0.13059051  0.06950049  0.00626144 -0.07066071
  0.05958176  0.03685153  0.05338897 -0.09526645  0.02083069 -0.06202321], dtype=float32)>with<JVPTrace(level=2/0)> with
  primal = Array([ 0.10775851,  0.04918392,  0.01585463,  0.00516143, -0.04751123,
       -0.11575346, -0.03134411, -0.07147755,  0.0738516 ,  0.05023827,
       -0.03865442, -0.00582975, -0.1220386 , -0.13444528, -0.08170804,
        0.08175096,  0.00787458,  0.06062046,  0.09004661,  0.09654981,
       -0.0662475 , -0.08358102, -0.11122112, -0.05428082, -0.06554702,
        0.09682679, -0.12541038, -0.03378771,  0.02200535, -0.07350967,
        0.02770312, -0.00695753, -0.01645336, -0.05649718, -0.04959764,
       -0.11056943, -0.12115514, -0.05989654,  0.14061187,  0.06624241,
       -0.06583318, -0.005252  , -0.11836478,  0.11246587,  0.0271713 ,
        0.11750431,  0.07850417, -0.06040584,  0.09184039,  0.10362697,
        0.01180503, -0.027098  , -0.08464443, -0.02608421, -0.05656923,
       -0.02142112, -0.12639135,  0.02386263, -0.11191567,  0.04467823,
       -0.13220203, -0.03854299, -0.04984348, -0.01699867,  0.14137791,
        0.08743852, -0.06544003,  0.08472764, -0.10589565,  0.02012213,
       -0.11833935,  0.06560114,  0.09370162, -0.07737724,  0.12821521,
       -0.01117906,  0.04584336,  0.07000545,  0.01603958,  0.11899309,
       -0.14027622,  0.07592981, -0.10511599,  0.05738479, -0.08048363,
        0.1112176 , -0.01404579,  0.13629352, -0.03966052,  0.00368229,
        0.13149391,  0.0613237 ,  0.03257988,  0.04302469,  0.07787214,
       -0.10808917,  0.03874327, -0.03916758,  0.13408522,  0.12868129,
       -0.11744759,  0.03493647,  0.1018627 ,  0.08607112, -0.08873217,
        0.05223043,  0.11900814, -0.08163224,  0.11642231, -0.13964559,
        0.00903511, -0.1114857 , -0.09049829,  0.1086093 ,  0.07869306,
       -0.0801034 , -0.04514933, -0.08470508, -0.02529006,  0.04486167,
        0.09817502,  0.03489031,  0.07399088,  0.12748508, -0.09509786,
        0.0055626 , -0.01833148, -0.10129163,  0.09001268, -0.01657063,
       -0.01100522, -0.08580286, -0.10233583,  0.0921489 , -0.02760467,
       -0.05364306,  0.05732238, -0.114976  ,  0.01357344, -0.11178491,
        0.13059051,  0.06950049,  0.00626144, -0.07066071,  0.05958176,
        0.03685153,  0.05338897, -0.09526645,  0.02083069, -0.06202321],      dtype=float32)
  tangent = Traced<ShapedArray(float32[150])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float32[150]), None)
    recipe = LambdaBinding(),
      bias_n=Array([-0.13557738, -0.01826466, -0.11379647,  0.03002761, -0.05373143,
       -0.13535033, -0.11776366, -0.13534352,  0.04616705, -0.06981359,
        0.0668827 ,  0.02556348,  0.02485131,  0.01870926,  0.09914312,
        0.03985198,  0.02124222,  0.11707108, -0.04623975, -0.10662961,
       -0.02081404,  0.1329834 ,  0.14050601,  0.06676772, -0.14081189,
        0.06584595,  0.05872759,  0.01893924,  0.06510666,  0.1402631 ,
       -0.02975099,  0.12213926,  0.02933522,  0.08333141, -0.06893943,
       -0.11946926, -0.02235826, -0.04785303, -0.00692396, -0.1087413 ,
       -0.00336821,  0.0272326 ,  0.05086501,  0.05341786,  0.01107295,
        0.01640911, -0.1308576 ,  0.00662248,  0.04670319,  0.12526305],      dtype=float32),
      input_size=12,
      hidden_size=50,
      use_bias=True
    ),
    noise_std=None,
    hidden_size=50,
    intervenors={'cell': [], 'cell_noise': [], 'readout': []},
    encoder=None,
    encoding_size=None,
    readout=Linear(
      weight=Array([[-6.72542676e-02,  1.18864626e-02,  4.37349081e-04,
         9.21389461e-02,  1.96063817e-02,  1.70267224e-02,
        -9.71035063e-02,  1.91074312e-02, -1.38683021e-02,
        -1.06484890e-02,  4.73063737e-02,  7.70227611e-02,
        -1.35590434e-01, -9.20350999e-02,  1.35510489e-01,
         1.09113827e-01,  1.14233270e-01,  7.05997199e-02,
        -7.40352944e-02,  9.89771187e-02,  1.34387478e-01,
         5.56547940e-03, -3.25440466e-02,  3.96841317e-02,
         3.83395106e-02,  1.14373609e-01, -5.55023104e-02,
         2.72619277e-02, -1.08909048e-01, -1.23761021e-01,
         7.03639984e-02, -8.55281949e-02,  6.65174127e-02,
         1.17446885e-01, -8.56687129e-03, -1.34541750e-01,
         1.01968914e-01, -9.24859345e-02,  1.27929315e-01,
         5.87666035e-02, -4.38290834e-02, -7.16323182e-02,
         4.55793887e-02, -1.29857808e-02,  3.42736840e-02,
         1.03233114e-01,  4.20993567e-03, -8.36787671e-02,
        -1.10621862e-01,  1.23267040e-01],
       [ 1.27613738e-01, -1.16794959e-01, -1.30039692e-01,
        -3.20141390e-02,  9.21163261e-02, -5.30226901e-02,
        -7.03689530e-02,  6.02535009e-02,  3.58258188e-03,
        -1.05701737e-01,  1.00176856e-01,  1.03709370e-01,
         9.50417519e-02, -1.04796395e-01,  1.05237454e-01,
        -4.34883982e-02,  3.41562480e-02,  1.17571250e-01,
        -6.57262281e-02,  2.96436399e-02,  5.52929938e-02,
         7.29492456e-02,  5.94549030e-02, -1.28938109e-01,
         7.93675780e-02,  1.15138009e-01, -6.18541092e-02,
        -1.27960637e-01, -3.12536955e-03,  1.85653567e-02,
        -1.04305863e-01,  1.24323368e-02, -1.09997839e-02,
         3.12786549e-02,  9.77007151e-02, -1.27228692e-01,
        -7.62997270e-02,  8.66250992e-02, -1.95586979e-02,
         8.89282078e-02, -7.20876381e-02, -8.68208706e-03,
        -5.85110560e-02, -1.06608868e-02, -6.52401894e-02,
        -1.62499100e-02, -6.98623136e-02,  1.19110093e-01,
        -2.95092389e-02, -1.41203716e-01],
       [ 1.12760380e-01,  1.40272364e-01,  1.50656849e-02,
        -3.00393403e-02,  5.60820103e-02, -1.03354260e-01,
        -1.80157200e-02,  8.80250782e-02, -9.67560560e-02,
         2.82337666e-02, -5.16295433e-03, -8.23378861e-02,
         8.00954401e-02, -8.78513306e-02, -8.36912021e-02,
         6.86377585e-02,  2.10352242e-02, -9.14882347e-02,
        -3.21972594e-02, -1.09505139e-01,  7.47582018e-02,
         2.80591846e-02, -3.11080813e-02,  1.36174411e-02,
         8.61373693e-02,  6.07930124e-03,  3.41463983e-02,
         1.32539138e-01,  8.48398954e-02,  8.37818980e-02,
         1.89776868e-02, -4.10782099e-02,  2.40159035e-03,
         8.42878968e-02,  8.90408158e-02,  7.63163418e-02,
         9.14649367e-02, -4.67537344e-03, -2.59858295e-02,
         1.03082389e-01,  6.95625395e-02, -1.72882974e-02,
        -4.70588133e-02, -8.09948146e-03, -1.16620809e-01,
        -4.12845612e-02,  7.79509097e-02,  1.17387772e-02,
        -2.13157833e-02, -1.67784616e-02],
       [ 6.15209490e-02,  1.18853942e-01, -1.30422384e-01,
        -4.86907363e-03, -2.83334702e-02, -5.14886826e-02,
        -1.35260671e-02,  1.11012757e-02, -5.84757179e-02,
        -1.17120028e-01, -1.06712118e-01,  5.01218438e-02,
         2.36379057e-02, -3.32275629e-02,  6.67493194e-02,
         7.79413879e-02,  1.06601179e-01,  1.32463053e-01,
        -5.12347594e-02, -3.39569449e-02,  1.00527719e-01,
        -1.22298390e-01, -1.15393154e-01, -6.03934005e-02,
         3.03554088e-02,  1.16628602e-01, -1.04854852e-01,
        -7.31304288e-04, -1.19324140e-01,  3.68810892e-02,
         9.90118831e-02, -1.17738105e-01,  9.38034505e-02,
        -4.88147512e-02,  9.29135084e-03,  8.91126692e-02,
        -1.34151667e-01, -3.50975022e-02, -2.88155004e-02,
        -6.93179443e-02,  8.74220431e-02,  1.16192102e-02,
         8.80019218e-02,  1.02587968e-01, -5.15192747e-03,
         6.01235628e-02, -1.03101134e-04,  1.31010562e-02,
        -1.18497014e-01,  1.40758112e-01],
       [ 7.61456341e-02,  1.25935331e-01,  4.75183427e-02,
         9.48918164e-02,  1.11375645e-01,  1.08758360e-02,
         4.03704047e-02, -5.06093279e-02,  4.69170362e-02,
         1.83924437e-02,  7.45407492e-02, -3.54138091e-02,
         2.19313651e-02,  8.00184906e-02,  3.77369821e-02,
         1.89222395e-03,  2.99393684e-02,  3.07072103e-02,
         1.45673603e-02, -1.35866374e-01, -7.47714788e-02,
         6.67015016e-02, -7.26446137e-02, -1.20782405e-02,
         9.91788208e-02, -7.91318566e-02, -6.11485690e-02,
         8.95227790e-02,  2.08974481e-02, -9.26379338e-02,
        -9.93933678e-02,  4.62893099e-02,  1.67046487e-02,
         3.78260165e-02, -1.82428062e-02,  3.08274478e-02,
         5.64997792e-02,  1.06107563e-01, -3.33470255e-02,
        -9.95327532e-02, -1.01709351e-01, -2.49728486e-02,
         9.84004140e-02,  1.15185976e-02, -1.16112247e-01,
        -6.24689832e-02, -1.21502459e-01,  1.08800665e-01,
        -8.32274854e-02, -4.31480259e-02],
       [ 3.50090563e-02,  1.06462374e-01,  1.34730086e-01,
        -4.28778082e-02, -1.18515223e-01,  1.12172648e-01,
         9.59329009e-02,  1.15144983e-01, -7.48871639e-02,
        -1.21899918e-01,  1.08886316e-01,  1.33966729e-01,
         8.35431814e-02, -6.43999130e-02, -1.10103190e-01,
         1.31565854e-01, -8.77296478e-02,  1.56707019e-02,
        -1.19386010e-01, -8.05518031e-03,  5.72792292e-02,
         2.39463300e-02, -1.83746442e-02,  8.62331688e-02,
        -4.40444052e-03,  8.92914087e-02,  3.48998159e-02,
         1.09457865e-01,  2.62385756e-02,  1.35241196e-01,
         1.08959660e-01,  4.93883491e-02,  1.06739104e-02,
        -1.03751823e-01,  7.42337555e-02,  9.38796848e-02,
        -1.17344990e-01, -2.06158459e-02, -1.30271941e-01,
         1.89798027e-02,  1.07818455e-01,  9.65684205e-02,
         3.93344760e-02, -8.62860680e-02,  5.25110662e-02,
        -1.15613535e-01,  6.30783290e-02, -3.16465497e-02,
        -8.71890560e-02, -1.62591040e-02]], dtype=float32),
      bias=Array([-0.11465211, -0.07937415,  0.06036161, -0.06731938, -0.03168098,
        0.10613357], dtype=float32),
      in_features=50,
      out_features=6,
      use_bias=True
    ),
    out_nonlinearity=<wrapped function sigmoid>
  )
)
2023-12-05 15:22:39,259 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[50])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 0.10960981  0.24662255  0.19499816  0.15796539  0.48318124 -0.25951338
  -0.3607026   0.33414623 -0.15902527 -0.24026328  0.11147537 -0.37188104
   0.0439376   0.38270283  0.19711056 -0.36913493 -0.54701114  0.14024198
   0.08910619  0.37771374  0.05783462  0.3527761   0.11680625  0.49477524
  -0.53925     0.39478204  0.39861393 -0.12259652 -0.04933433  0.07472087
  -0.20563534  0.3260364  -0.17011756  0.4135096   0.13043502  0.11877499
  -0.16601723 -0.03300707  0.29231173  0.16675751  0.16106553 -0.38269153
   0.28772092 -0.40490735 -0.17219472 -0.37619528  0.36429116 -0.55946434
   0.27725872  0.39388752]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 0.10960981,  0.24662255,  0.19499816,  0.15796539,  0.48318124,
        -0.25951338, -0.3607026 ,  0.33414623, -0.15902527, -0.24026328,
         0.11147537, -0.37188104,  0.0439376 ,  0.38270283,  0.19711056,
        -0.36913493, -0.54701114,  0.14024198,  0.08910619,  0.37771374,
         0.05783462,  0.3527761 ,  0.11680625,  0.49477524, -0.53925   ,
         0.39478204,  0.39861393, -0.12259652, -0.04933433,  0.07472087,
        -0.20563534,  0.3260364 , -0.17011756,  0.4135096 ,  0.13043502,
         0.11877499, -0.16601723, -0.03300707,  0.29231173,  0.16675751,
         0.16106553, -0.38269153,  0.28772092, -0.40490735, -0.17219472,
        -0.37619528,  0.36429116, -0.55946434,  0.27725872,  0.39388752]],      dtype=float32)
    tangent = Traced<ShapedArray(float32[1,50])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,50]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f980>, in_tracers=(Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,50]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4728360; to 'JaxprTracer' at 0x7f74c47283b0>], out_avals=[ShapedArray(float32[1,50])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc1c9030>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell'), Scope(name='eqx.nn.GRUCell')))))
  batch_dim = 0
2023-12-05 15:22:39,259 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.47655874 0.4405419  0.5274446  0.42702743 0.4650225  0.53214246]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.47655874, 0.4405419 , 0.5274446 , 0.42702743, 0.4650225 ,
        0.53214246]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3eff0>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c471d260; to 'JaxprTracer' at 0x7f74dc17b510>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc181ab0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
2023-12-05 15:22:39,284 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:39,284 [DEBUG] feedbax.model,114: Stage: mechanics_step
2023-12-05 15:22:39,284 [DEBUG] feedbax.model,115: Stage module:
Mechanics(
  plant=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  ),
  dt=0.05,
  solver=Euler(),
  clip_states=False,
  intervenors={
    'convert_effector_force':
    [],
    'plant_update':
    [],
    'solver_step':
    [],
    'clip_states':
    [],
    'get_effector':
    []
  }
)
2023-12-05 15:22:39,284 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.48473087 0.46143663 0.5376966  0.42469215 0.459974   0.53680605]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.48473087, 0.46143663, 0.5376966 , 0.42469215, 0.459974  ,
        0.53680605]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5f0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24976687 0.24851286 0.24857897 0.24432872 0.24839792 0.24864532]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c47353a0; to 'JaxprTracer' at 0x7f74c4735fd0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47141f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:39,284 [DEBUG] feedbax.model,117: Substate:
MechanicsState(
  plant=PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107880>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fdda30; to 'JaxprTracer' at 0x7f74c7fddf80>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc14efb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f140>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b970; to 'JaxprTracer' at 0x7f74c7f23dd0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc22c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed00>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1cb80; to 'JaxprTracer' at 0x7f74c7f1c180>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe7bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d000>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b9c0; to 'JaxprTracer' at 0x7f74c7f181d0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe44b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    )
  ),
  effector=CartesianState2D(
    pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14306724 0.4225216 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14306724, 0.4225216 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186750; to 'JaxprTracer' at 0x7f74dc184900>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f96e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 2.7132246  -0.70774716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 2.7132246 , -0.70774716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed80>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2a6d90; to 'JaxprTracer' at 0x7f74c7fc70b0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    force=Array([0., 0.], dtype=float32)
  ),
  solver=None
)
2023-12-05 15:22:39,306 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:39,306 [DEBUG] feedbax.model,114: Stage: convert_effector_force
2023-12-05 15:22:39,306 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function update_state_given_effector_force>,
  __self__=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  )
)
2023-12-05 15:22:39,306 [DEBUG] feedbax.model,116: Input:
Array([0., 0.], dtype=float32)
2023-12-05 15:22:39,306 [DEBUG] feedbax.model,117: Substate:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107880>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fdda30; to 'JaxprTracer' at 0x7f74c7fddf80>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc14efb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:39,375 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:39,375 [DEBUG] feedbax.model,114: Stage: plant_update
2023-12-05 15:22:39,375 [DEBUG] feedbax.model,115: Stage module:
MuscledArm(
  skeleton=TwoLink(
    l=Array([0.3 , 0.33], dtype=float32),
    m=Array([1.4, 1. ], dtype=float32),
    I=Array([0.025, 0.045], dtype=float32),
    s=Array([0.11, 0.16], dtype=float32),
    B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
    inertia_gain=1.0
  ),
  muscle_model=TodorovLiVirtualMuscle(
    beta=1.93,
    omega=1.03,
    rho=1.87,
    v_max=-5.72,
    c_v=(1.38, 2.09),
    a_v=(-3.12, 4.21, -2.67),
    b_v=0.62,
    n_f=(2.11, 4.16),
    a_f=0.56,
    c1=0.0,
    c2=-0.02,
    k1=0.0,
    k2=-18.7,
    l_r1=0.0,
    l_r2=0.79,
    tau_l=0.0,
    c_y=0.0,
    v_y=0.0,
    tau_y=0.0,
    hill_shorten_approx=False,
    noise_std=None
  ),
  activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
  n_muscles=6,
  moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
  theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
  l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
  f0=1.0,
  intervenors={'muscle_update': [], 'muscle_torques': []}
)
2023-12-05 15:22:39,375 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.48473087 0.46143663 0.5376966  0.42469215 0.459974   0.53680605]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.48473087, 0.46143663, 0.5376966 , 0.42469215, 0.459974  ,
        0.53680605]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5f0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24976687 0.24851286 0.24857897 0.24432872 0.24839792 0.24864532]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c47353a0; to 'JaxprTracer' at 0x7f74c4735fd0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47141f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:39,375 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4729c60; to 'JaxprTracer' at 0x7f74c4734e50>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4740c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f140>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b970; to 'JaxprTracer' at 0x7f74c7f23dd0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc22c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed00>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1cb80; to 'JaxprTracer' at 0x7f74c7f1c180>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe7bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d000>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b9c0; to 'JaxprTracer' at 0x7f74c7f181d0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe44b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:39,403 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:39,403 [DEBUG] feedbax.model,114: Stage: muscle_update
2023-12-05 15:22:39,403 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_update>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:39,403 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.48473087 0.46143663 0.5376966  0.42469215 0.459974   0.53680605]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.48473087, 0.46143663, 0.5376966 , 0.42469215, 0.459974  ,
        0.53680605]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5f0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24976687 0.24851286 0.24857897 0.24432872 0.24839792 0.24864532]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c47353a0; to 'JaxprTracer' at 0x7f74c4735fd0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47141f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0,
  TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4729c60; to 'JaxprTracer' at 0x7f74c4734e50>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4740c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:39,403 [DEBUG] feedbax.model,117: Substate:
(
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9004778  1.3318273  0.9449328  0.84952796 0.8737266  1.2879564 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9004778 , 1.3318273 , 0.9449328 , 0.84952796, 0.8737266 ,
        1.2879564 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f140>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc10b970; to 'JaxprTracer' at 0x7f74c7f23dd0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc22c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.1719408   2.6314745  -0.10725217  0.16113001 -1.1967007   2.250846  ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.1719408 ,  2.6314745 , -0.10725217,  0.16113001, -1.1967007 ,
         2.250846  ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed00>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1cb80; to 'JaxprTracer' at 0x7f74c7f1c180>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe7bf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.02585354 0.6011609  0.09970497 0.02334062 0.01749413 0.68167555]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.02585354, 0.6011609 , 0.09970497, 0.02334062, 0.01749413,
        0.68167555]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3d000>, in_tracers=(Traced<ShapedArray(float32[1,1,6]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f1b9c0; to 'JaxprTracer' at 0x7f74c7f181d0>], out_avals=[ShapedArray(float32[1,6])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe44b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:39,537 [DEBUG] feedbax.model,113: Module: MuscledArm
2023-12-05 15:22:39,537 [DEBUG] feedbax.model,114: Stage: muscle_torques
2023-12-05 15:22:39,537 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function muscle_torques>,
  __self__=MuscledArm(
    skeleton=TwoLink(
      l=Array([0.3 , 0.33], dtype=float32),
      m=Array([1.4, 1. ], dtype=float32),
      I=Array([0.025, 0.045], dtype=float32),
      s=Array([0.11, 0.16], dtype=float32),
      B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
      inertia_gain=1.0
    ),
    muscle_model=TodorovLiVirtualMuscle(
      beta=1.93,
      omega=1.03,
      rho=1.87,
      v_max=-5.72,
      c_v=(1.38, 2.09),
      a_v=(-3.12, 4.21, -2.67),
      b_v=0.62,
      n_f=(2.11, 4.16),
      a_f=0.56,
      c1=0.0,
      c2=-0.02,
      k1=0.0,
      k2=-18.7,
      l_r1=0.0,
      l_r2=0.79,
      tau_l=0.0,
      c_y=0.0,
      v_y=0.0,
      tau_y=0.0,
      hill_shorten_approx=False,
      noise_std=None
    ),
    activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
    n_muscles=6,
    moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
    theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
    l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
    f0=1.0,
    intervenors={'muscle_update': [], 'muscle_torques': []}
  )
)
2023-12-05 15:22:39,537 [DEBUG] feedbax.model,116: Input:
VirtualMuscleState(
  activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
  length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9590749  1.2002535  0.9502954  0.84147143 0.9335616  1.1754141 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9590749 , 1.2002535 , 0.9502954 , 0.84147143, 0.9335616 ,
        1.1754141 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3fda0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa27f0; to 'JaxprTracer' at 0x7f74c472d440>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4739e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4357526   3.2238371  -0.65401006  0.98255026 -2.0282261   3.3784544 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4357526 ,  3.2238371 , -0.65401006,  0.98255026, -2.0282261 ,
         3.3784544 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ffb0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c472da30; to 'JaxprTracer' at 0x7f74c472d9e0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
  tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04114477 0.5433889  0.0754779  0.02401366 0.02096415 0.6050691 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04114477, 0.5433889 , 0.0754779 , 0.02401366, 0.02096415,
        0.6050691 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473c760>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4754d10; to 'JaxprTracer' at 0x7f74c4754cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4751370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
)
2023-12-05 15:22:39,537 [DEBUG] feedbax.model,117: Substate:
Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.4877248 -0.8347964]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.4877248, -0.8347964]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5d0>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4729c60; to 'JaxprTracer' at 0x7f74c4734e50>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4740c70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
2023-12-05 15:22:39,558 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:39,559 [DEBUG] feedbax.model,114: Stage: solver_step
2023-12-05 15:22:39,559 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _solver_step>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:39,559 [DEBUG] feedbax.model,116: Input:
Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.48473087 0.46143663 0.5376966  0.42469215 0.459974   0.53680605]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.48473087, 0.46143663, 0.5376966 , 0.42469215, 0.459974  ,
        0.53680605]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f5f0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[0.24976687 0.24851286 0.24857897 0.24432872 0.24839792 0.24864532]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c47353a0; to 'JaxprTracer' at 0x7f74c4735fd0>], out_avals=[ShapedArray(float32[1,6])], primitive=mul, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47141f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='RNNCell')))))
  batch_dim = 0
2023-12-05 15:22:39,559 [DEBUG] feedbax.model,117: Substate:
(
  PlantState(
    skeleton=TwoLinkState(
      theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1831803]
 [-0.7627468]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1831803],
       [-0.7627468]], dtype=float32)
    tangent = Traced<ShapedArray(float32[2,1])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[2,1]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473c6a0>, in_tracers=(Traced<ConcreteArray([[ 2.  -2.   0.   0.   1.5 -2. ]
 [ 0.   0.   2.  -2.   2.  -1.5]], dtype=float32):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4756e80; to 'JaxprTracer' at 0x7f74c4756930>], out_avals=[ShapedArray(float32[2,1])], primitive=dot_general, params={'dimension_numbers': (((1,), (1,)), ((), ())), 'precision': None, 'preferred_element_type': None}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47538b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 1
    ),
    muscles=VirtualMuscleState(
      activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
      length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9590749  1.2002535  0.9502954  0.84147143 0.9335616  1.1754141 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9590749 , 1.2002535 , 0.9502954 , 0.84147143, 0.9335616 ,
        1.1754141 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3fda0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa27f0; to 'JaxprTracer' at 0x7f74c472d440>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4739e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4357526   3.2238371  -0.65401006  0.98255026 -2.0282261   3.3784544 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4357526 ,  3.2238371 , -0.65401006,  0.98255026, -2.0282261 ,
         3.3784544 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ffb0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c472da30; to 'JaxprTracer' at 0x7f74c472d9e0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
      tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04114477 0.5433889  0.0754779  0.02401366 0.02096415 0.6050691 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04114477, 0.5433889 , 0.0754779 , 0.02401366, 0.02096415,
        0.6050691 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473c760>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4754d10; to 'JaxprTracer' at 0x7f74c4754cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4751370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
    )
  ),
  None
)
2023-12-05 15:22:39,728 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:39,729 [DEBUG] feedbax.model,114: Stage: clip_states
2023-12-05 15:22:39,729 [DEBUG] feedbax.model,115: Stage module:
BoundMethod(
  __func__=<function _get_clipped_states>,
  __self__=Mechanics(
    plant=MuscledArm(
      skeleton=TwoLink(
        l=Array([0.3 , 0.33], dtype=float32),
        m=Array([1.4, 1. ], dtype=float32),
        I=Array([0.025, 0.045], dtype=float32),
        s=Array([0.11, 0.16], dtype=float32),
        B=Array([[0.05 , 0.025],
       [0.025, 0.05 ]], dtype=float32),
        inertia_gain=1.0
      ),
      muscle_model=TodorovLiVirtualMuscle(
        beta=1.93,
        omega=1.03,
        rho=1.87,
        v_max=-5.72,
        c_v=(1.38, 2.09),
        a_v=(-3.12, 4.21, -2.67),
        b_v=0.62,
        n_f=(2.11, 4.16),
        a_f=0.56,
        c1=0.0,
        c2=-0.02,
        k1=0.0,
        k2=-18.7,
        l_r1=0.0,
        l_r2=0.79,
        tau_l=0.0,
        c_y=0.0,
        v_y=0.0,
        tau_y=0.0,
        hill_shorten_approx=False,
        noise_std=None
      ),
      activator=ActivationFilter(tau_act=0.01, tau_deact=0.01),
      n_muscles=6,
      moment_arms=Array([[ 2. , -2. ,  0. ,  0. ,  1.5, -2. ],
       [ 0. ,  0. ,  2. , -2. ,  2. , -1.5]], dtype=float32),
      theta0=Array([[0.2617994 , 0.08517207, 0.        , 0.        , 0.07853982,
        0.03700098],
       [0.        , 0.        , 1.4112734 , 1.9079939 , 1.6224581 ,
        1.5973253 ]], dtype=float32),
      l0=Array([7.32, 3.26, 6.4 , 4.26, 5.95, 4.04], dtype=float32),
      f0=1.0,
      intervenors={'muscle_update': [], 'muscle_torques': []}
    ),
    dt=0.05,
    solver=Euler(),
    clip_states=False,
    intervenors={
      'convert_effector_force':
      [],
      'plant_update':
      [],
      'solver_step':
      [],
      'clip_states':
      [],
      'get_effector':
      []
    }
  )
)
2023-12-05 15:22:39,729 [DEBUG] feedbax.model,116: Input:
None
2023-12-05 15:22:39,729 [DEBUG] feedbax.model,117: Substate:
PlantState(
  skeleton=TwoLinkState(
    theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14884257 1.4656866 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14884257, 1.4656866 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473ce00>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4756700; to 'JaxprTracer' at 0x7f74c4757c90>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4743430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.3283596 -4.9247656]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.3283596, -4.9247656]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cd80>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c476cbd0; to 'JaxprTracer' at 0x7f74c4757f60>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4752930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
    torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1831803 -0.7627468]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1831803, -0.7627468]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cfa0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c476c180; to 'JaxprTracer' at 0x7f74c476c950>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4751830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
  ),
  muscles=VirtualMuscleState(
    activation=Array([0., 0., 0., 0., 0., 0.], dtype=float32),
    length=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.9590749  1.2002535  0.9502954  0.84147143 0.9335616  1.1754141 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.9590749 , 1.2002535 , 0.9502954 , 0.84147143, 0.9335616 ,
        1.1754141 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3fda0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c7fa27f0; to 'JaxprTracer' at 0x7f74c472d440>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4739e70>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    velocity=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-1.4357526   3.2238371  -0.65401006  0.98255026 -2.0282261   3.3784544 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-1.4357526 ,  3.2238371 , -0.65401006,  0.98255026, -2.0282261 ,
         3.3784544 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ffb0>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ConcreteArray([[7.32 3.26 6.4  4.26 5.95 4.04]], dtype=float32):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c472da30; to 'JaxprTracer' at 0x7f74c472d9e0>], out_avals=[ShapedArray(float32[1,6])], primitive=div, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f2e730>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm')))))
  batch_dim = 0,
    tension=Traced<ShapedArray(float32[6])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04114477 0.5433889  0.0754779  0.02401366 0.02096415 0.6050691 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04114477, 0.5433889 , 0.0754779 , 0.02401366, 0.02096415,
        0.6050691 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,6])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,6]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473c760>, in_tracers=(Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,6]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4754d10; to 'JaxprTracer' at 0x7f74c4754cc0>], out_avals=[ShapedArray(float32[1,6])], primitive=add_any, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4751370>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics'), Scope(name='MuscledArm'), Scope(name='fbx.VirtualMuscle')))))
  batch_dim = 0
  )
)
2023-12-05 15:22:39,739 [DEBUG] feedbax.model,113: Module: Mechanics
2023-12-05 15:22:39,739 [DEBUG] feedbax.model,114: Stage: get_effector
2023-12-05 15:22:39,740 [DEBUG] feedbax.model,115: Stage module:
<function <lambda>>
2023-12-05 15:22:39,740 [DEBUG] feedbax.model,116: Input:
TwoLinkState(
  theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14884257 1.4656866 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14884257, 1.4656866 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473ce00>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c4756700; to 'JaxprTracer' at 0x7f74c4757c90>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4743430>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  d_theta=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.3283596 -4.9247656]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.3283596, -4.9247656]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cd80>, in_tracers=(Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>, Traced<ShapedArray(float32[1,2]):JaxprTrace(level=1/0)>), out_tracer_refs=[<weakref at 0x7f74c476cbd0; to 'JaxprTracer' at 0x7f74c4757f60>], out_avals=[ShapedArray(float32[1,2])], primitive=add, params={}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4752930>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0,
  torque=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-2.1831803 -0.7627468]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-2.1831803, -0.7627468]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cfa0>, in_tracers=(Traced<ShapedArray(float32[2,1]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c476c180; to 'JaxprTracer' at 0x7f74c476c950>], out_avals=[ShapedArray(float32[1,2])], primitive=transpose, params={'permutation': (1, 0)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4751830>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='SimpleFeedback'), Scope(name='Mechanics')))))
  batch_dim = 0
)
2023-12-05 15:22:39,740 [DEBUG] feedbax.model,117: Substate:
CartesianState2D(
  pos=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14306724 0.4225216 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14306724, 0.4225216 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186750; to 'JaxprTracer' at 0x7f74dc184900>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f96e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  vel=Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 2.7132246  -0.70774716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 2.7132246 , -0.70774716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed80>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2a6d90; to 'JaxprTracer' at 0x7f74c7fc70b0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  force=Array([0., 0.], dtype=float32)
)
2023-12-05 15:22:39,983 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:39,983 [DEBUG] feedbax.model,114: Stage: get_feedback
2023-12-05 15:22:39,983 [DEBUG] feedbax.model,115: Stage module:
Channel(delay=0, noise_std=None)
2023-12-05 15:22:39,983 [DEBUG] feedbax.model,116: Input:
(
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14884257 1.4656866 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14884257, 1.4656866 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc1074f0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7f63010; to 'JaxprTracer' at 0x7f74c7f630b0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74dc2d1cf0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.3283596 -4.9247656]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.3283596, -4.9247656]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc105f40>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc630900; to 'JaxprTracer' at 0x7f74dc630040>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f6b970>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.28225583 0.37417257]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.28225583, 0.37417257]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473ced0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c47362f0; to 'JaxprTracer' at 0x7f74c47368e0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4776f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
  Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 3.1188018 -1.3005357]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 3.1188018, -1.3005357]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cc70>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c476f8d0; to 'JaxprTracer' at 0x7f74c476f560>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c4746f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
)
2023-12-05 15:22:39,983 [DEBUG] feedbax.model,117: Substate:
ChannelState(
  output=(
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.6260505 1.5874884]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.6260505, 1.5874884]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cde0>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c4794ae0; to 'JaxprTracer' at 0x7f74c4794bd0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c475ffb0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-4.2893033  -0.34320694]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-4.2893033 , -0.34320694]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cd10>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c4795030; to 'JaxprTracer' at 0x7f74c4795120>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c475f230>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.04530472 0.43993482]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.04530472, 0.43993482]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473d160>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c4795620; to 'JaxprTracer' at 0x7f74c4795580>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c47079f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
    Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 1.9746065  -0.31869572]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 1.9746065 , -0.31869572]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c473cd30>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c4795bc0; to 'JaxprTracer' at 0x7f74c4795b20>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7fe7d30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
  ),
  queue=(
    (
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.4115853 1.5703281]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.4115853, 1.5703281]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107310>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc1d13f0; to 'JaxprTracer' at 0x7f74dc235f30>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f00af0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[-5.254854 -2.092832]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[-5.254854, -2.092832]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74dc107130>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74c7fde930; to 'JaxprTracer' at 0x7f74c7fde700>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f52530>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[0.14306724 0.4225216 ]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[0.14306724, 0.4225216 ]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3f390>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc186750; to 'JaxprTracer' at 0x7f74dc184900>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f96e30>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0,
      Traced<ShapedArray(float32[2])>with<BatchTrace(level=3/0)> with
  val = Traced<ConcreteArray([[ 2.7132246  -0.70774716]], dtype=float32)>with<JVPTrace(level=2/0)> with
    primal = Array([[ 2.7132246 , -0.70774716]], dtype=float32)
    tangent = Traced<ShapedArray(float32[1,2])>with<JaxprTrace(level=1/0)> with
      pval = (ShapedArray(float32[1,2]), None)
      recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f74c7f3ed80>, in_tracers=(Traced<ShapedArray(float32[1,1,2]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7f74dc2a6d90; to 'JaxprTracer' at 0x7f74c7fc70b0>], out_avals=[ShapedArray(float32[1,2])], primitive=squeeze, params={'dimensions': (1,)}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f74c7f968f0>, name_stack=NameStack(stack=(Transform(name='jvp'), Transform(name='vmap'), Scope(name='fbx.Iterator'), Scope(name='fbx.Iterator._body_func'), Scope(name='fbx.tree_get_idx')))))
  batch_dim = 0
    ),
  )
)
2023-12-05 15:22:40,006 [DEBUG] feedbax.model,113: Module: SimpleFeedback
2023-12-05 15:22:40,006 [DEBUG] feedbax.model,114: Stage: nn_step
